# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Py39-Onnx1102-SkLatest:
        python.version: '3.9'
        numpy.version: '>=1.18.3'
        onnx.version: '==1.10.2'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '>=1.0'
      Py39-Onnx190-SkLatest:
        python.version: '3.9'
        numpy.version: '>=1.18.3'
        onnx.version: '==1.9.0'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '>=1.0'
      Py39-Onnx181-SkLatest:
        python.version: '3.9'
        numpy.version: '>=1.18.3'
        onnx.version: '==1.8.1'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '>=1.0'
      Py38-Onnx170-Sk0242:
        python.version: '3.8'
        numpy.version: '>=1.18.3'
        onnx.version: '==1.7.0'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==0.24.2'
      Py37-Onnx160-Sk0232:
        python.version: '3.7'
        numpy.version: '==1.18.1'
        onnx.version: '==1.6.0'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==0.23.2'
    maxParallel: 3

  steps:
  - script: |
      sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge numpy$(numpy.version)
      conda install protobuf
      python -m pip install --upgrade pip
    displayName: 'Install environment'

  - script: |
      conda install numpy$(numpy.version)
      pip install openpyxl cerberus
    displayName: 'install numpy'

  - script: |
      conda install scikit-learn$(sklearn.version)
    displayName: 'install scikit-learn'

  - script: |
      pip install onnx$(onnx.version)
    displayName: 'install onnx'

  - script: |
      pip install flatbuffers
      pip install $(onnxrt.version)
    displayName: 'install onnxruntime'

  - script: |
      pip install -r requirements.txt
      git clone https://github.com/microsoft/onnxconverter-common
      cd onnxconverter-common
      pip install -e .
      cd ..
      pip install -r requirements-dev.txt
      pip install pytest
    displayName: 'install requirements'

  - script: |
      pip install -e .
    displayName: 'install'

  - script: |
      echo "---------------"
      pip show numpy
      echo "---------------"
      pip show onnx
      echo "---------------"
      pip show onnxruntime
      echo "---------------"
      pip show onnxconverter-common
      echo "---------------"
      pip show scikit-learn
      echo "---------------"
    displayName: 'version'

  - script: |
      pytest tests --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      python -m pip install openpyxl
      python tests/benchmark.py
    displayName: 'benchmark'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
