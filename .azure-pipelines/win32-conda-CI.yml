# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'CI_Windows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Py311-Onnx160-Rt171-Skl140:
        python.version: '3.11'  # onnxruntime-extensions needs to be update to switch to 3.12
        onnx.version: 'onnx==1.16.0'  # '-i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.17.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '>=1.4.0'
      Py311-Onnx150-Rt170-Skl140:
        python.version: '3.11'  # onnxruntime-extensions needs to be update to switch to 3.12
        onnx.version: 'onnx==1.15.0'  # '-i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.17.0'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '>=1.4.0'
      Py311-Onnx150-Rt163-Skl140:
        python.version: '3.11'
        onnx.version: 'onnx==1.15.0'  # '-i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.16.3'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.4.0'
      Py311-Onnx150-Rt163-Skl131:
        python.version: '3.11'
        onnx.version: 'onnx==1.15.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.16.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.3.1'
      Py311-Onnx141-Rt160-Skl131:
        python.version: '3.11'
        onnx.version: 'onnx==1.14.1'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.16.0'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '>=1.3.1'
      Py311-Onnx140-Rt151-Skl130:
        python.version: '3.11'
        onnx.version: 'onnx==1.14.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.15.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.3.0'
      Py310-Onnx140-Rt140-Skl122:
        python.version: '3.10'
        onnx.version: 'onnx==1.14.1'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.14.0'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.2.2'
      Py310-Onnx130-Rt140-Skl121:
        python.version: '3.10'
        onnx.version:  'onnx==1.13.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.14.0'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.2.2'
      Py310-Onnx130-Rt131-Skl120:
        python.version: '3.10'
        onnx.version:  'onnx==1.13.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.13.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.2.0'
      Py310-Onnx120-Rt131-Skl120:
        python.version: '3.10'
        onnx.version:  'onnx==1.12.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.13.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.2.0'
      Py310-Onnx120-Rt120-Skl11:
        python.version: '3.10'
        onnx.version:  'onnx==1.12.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.12.0'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.1.3'
      Py39-Onnx120-Rt1111-Skl11:
        python.version: '3.9'
        onnx.version:  'onnx==1.12.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.11.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.1.3'
      Py39-Onnx1110-Rt1111-Skl11:
        python.version: '3.9'
        onnx.version:  'onnx==1.11.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.22.3'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.11.1'
        onnxcc.version: 'onnxconverter-common>=1.8.1'
        sklearn.version: '==1.1.3'

    maxParallel: 3

  steps:
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name skl2onnxEnvironment $(numpy.version) "$(scipy.version)" pandas python=$(python.version) pytest
    displayName: Create Anaconda environment

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install --upgrade pip
      conda install -y -c conda-forge protobuf
    displayName: 'Install protobuf'

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install typing-extensions>=3.6.2.1
      python -m pip install $(onnx.version)
    displayName: 'Install onnx'

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install $(onnxrt.version)
    displayName: 'Install onnxruntime'

  - script: |
      call activate skl2onnxEnvironment
      python -c "import numpy"
    displayName: 'check numpy'

  - script: |
      call activate skl2onnxEnvironment
      # latest version of scikit-learn are not available on conda
      pip install scikit-learn$(sklearn.version)
    displayName: 'install scikit-learn'

  - script: |
      call activate skl2onnxEnvironment
      python -c "import numpy"
    displayName: 'check numpy'

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install ruff
      ruff skl2onnx tests tests_onnxmltools
    displayName: 'ruff'

  - script: |
      call activate skl2onnxEnvironment
      pip install $(onnxcc.version) --no-deps
    displayName: 'install onnxconverter-common'

  - script: |
      call activate skl2onnxEnvironment
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
    displayName: 'install requirements'

  - script: |
      call activate skl2onnxEnvironment
      pip install -e .
    displayName: 'install skl2onnx'

  - script: |
      call activate skl2onnxEnvironment
      python -c "import numpy"
    displayName: 'check numpy'

  - script: |
      call activate skl2onnxEnvironment
      if "$(onnx.target_opset)" neq "" set TEST_TARGET_OPSET=$(onnx.target_opset)
      cd tests
      python -c "from numpy import __version__;print('numpy', __version__)"
      python -c "from scipy import __version__;print('scipy', __version__)"
      python -c "from sklearn import __version__;print('sklearn', __version__)"
      python -c "from onnxruntime import __version__;print('onnxruntime', __version__)"
      python -c "from onnx import __version__;print('onnx', __version__)"
      python -c "from skl2onnx import __max_supported_opset__;print('__max_supported_opset__', __max_supported_opset__)"
      python -c "import test_utils;print('max_onnxruntime_opset', test_utils.max_onnxruntime_opset())"
      python -c "import test_utils;print('TARGET OPSET, IR', test_utils.TARGET_OPSET, test_utils.TARGET_IR)"
      python -c "import onnx.defs;print('onnx_opset_version', onnx.defs.onnx_opset_version())"
      cd ..
    displayName: 'target_opset'

  - script: |
      call activate skl2onnxEnvironment
      if "$(onnx.target_opset)" neq "" set TEST_TARGET_OPSET=$(onnx.target_opset)
      python -m pytest tests --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml --maxfail=10
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
