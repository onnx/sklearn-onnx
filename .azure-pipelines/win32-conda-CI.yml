# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Py36-Onnx141:
        python.version: '3.6'
        onnx.version: '==1.4.1'
        numpy.version: '==1.16.1'
        onnxrt.version: '==0.2.1'
      Py36-Onnx130-Rt014-Npy0154:
        python.version: '3.6'
        onnx.version: '==1.3.0'
        numpy.version: '==1.15.4'
        onnxrt.version: '==0.1.4'
    maxParallel: 3

  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge numpy$(numpy.version)
      conda install -c conda-forge protobuf
      python -m pip install --upgrade pip
      test '$(python.version)' == '3.7' && pip install https://github.com/xadupre/onnx/releases/download/1.3.0/onnx-1.3.0-cp37-cp37m-win_amd64.whl
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
      pip install pytest
    displayName: 'Install dependencies'

  - script: |
      pip install numpy$(numpy.version)
    displayName: 'update numpy (onnxruntime 1.4+ was compiled with numpy>=1.16)'

  - script: |
      pip install onnx$(onnx.version)
    displayName: 'install onnx'

  - script: |
      pip install onnxruntime$(onnxrt.version)
    displayName: 'install onnxruntime'

  - script: |
      pip install -e .
    displayName: 'install'

  - script: |
      python -c "import numpy;print('numpy:',numpy.__version__)"
      python -c "import onnx;print('onnx:',onnx.__version__)"
      python -c "import onnxruntime;print('onnxruntime:',onnxruntime.__version__)"
    displayName: 'version'

  - script: |
      pytest tests --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      pip install onnxmltools openpyxl
      coverage run --include=skl2onnx/** tests/benchmark.py
      coverage report -m
      coverage html
    displayName: 'coverage'

  - script: |
      python tests/benchmark.py
    displayName: 'benchmark'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
