# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Py38-Onnx180-RtTST-Skl0232:
        python.version: '3.8'
        # onnx.version: '-i https://test.pypi.org/simple/ onnx'
        onnx.version: 'onnx==1.8.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.19'
        scipy.version: 'scipy'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        onnxcc.version: 'git+https://github.com/microsoft/onnxconverter-common.git'
        sklearn.version: '==0.23.2'
      Py38-Onnx180-Rt160-Skl0232:
        python.version: '3.8'
        # onnx.version: '-i https://test.pypi.org/simple/ onnx'
        onnx.version: 'onnx==1.8.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.19'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.6.0'
        onnxcc.version: 'git+https://github.com/microsoft/onnxconverter-common.git'
        sklearn.version: '==0.23.2'
      Py38-Onnx170-RtTST-Skl0232:
        python.version: '3.8'
        # onnx.version: '-i https://test.pypi.org/simple/ onnx'
        onnx.version: 'onnx==1.7.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.19'
        scipy.version: 'scipy'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        onnxcc.version: 'git+https://github.com/microsoft/onnxconverter-common.git'
        sklearn.version: '==0.23.2'
      Py37-Onnx170-RtTST-Skl0232:
        python.version: '3.7'
        # onnx.version: '-i https://test.pypi.org/simple/ onnx'
        onnx.version: 'onnx==1.7.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.19'
        scipy.version: 'scipy'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        onnxcc.version: 'git+https://github.com/microsoft/onnxconverter-common.git'
        sklearn.version: '==0.23.2'
      Py37-Onnx170-Rt152-Skl0232:
        python.version: '3.7'
        # onnx.version: '-i https://test.pypi.org/simple/ onnx'
        onnx.version: 'onnx==1.7.0'
        onnx.target_opset: ''
        numpy.version: 'numpy>=1.18.1'
        scipy.version: 'scipy'
        onnxrt.version: 'onnxruntime==1.5.2'  # -i https://test.pypi.org/simple/ ort-nightly'
        onnxcc.version: 'git+https://github.com/microsoft/onnxconverter-common.git'
        sklearn.version: '==0.23.2'   
    maxParallel: 3

  steps:
  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name skl2onnxEnvironment $(numpy.version) $(scipy.version) pandas python=$(python.version) pytest
    displayName: Create Anaconda environment

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install --upgrade pip
      conda install -y -c conda-forge protobuf
    displayName: 'Install protobuf'

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install typing-extensions
      python -m pip install $(onnx.version)
    displayName: 'Install onnx'

  - script: |
      call activate skl2onnxEnvironment
      python -m pip install $(onnxrt.version)
    displayName: 'Install onnxruntime'

  - script: |
      call activate skl2onnxEnvironment
      python -c "import numpy"
    displayName: 'check numpy'

  - script: |
      call activate skl2onnxEnvironment
      # latest version of scikit-learn are not available on conda
      pip install scikit-learn$(sklearn.version)
    displayName: 'install scikit-learn'

  - script: |
      call activate skl2onnxEnvironment
      python -c "import numpy"
    displayName: 'check numpy'

  - script: |
      call activate skl2onnxEnvironment
      pip install flake8
    displayName: 'install flake8'

  - script: |
      call activate skl2onnxEnvironment
      flake8 skl2onnx tests tests_onnxmltools
    displayName: 'flake8'

  - script: |
      call activate skl2onnxEnvironment
      pip install $(onnxcc.version)
    displayName: 'install onnxconverter-common'

  - script: |
      call activate skl2onnxEnvironment
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
    displayName: 'install requirements'

  - script: |
      call activate skl2onnxEnvironment
      pip install -e .
    displayName: 'install skl2onnx'

  - script: |
      call activate skl2onnxEnvironment
      python -c "import numpy"
    displayName: 'check numpy'

  - script: |
      call activate skl2onnxEnvironment
      if "$(onnx.target_opset)" neq "" set TEST_TARGET_OPSET=$(onnx.target_opset)
      cd tests
      python -c "import test_utils;print(test_utils.TARGET_OPSET, test_utils.TARGET_IR)"
      cd ..
    displayName: 'target_opset'

  - script: |
      call activate skl2onnxEnvironment
      echo "---------------"
      pip show numpy
      echo "---------------"
      pip show pandas
      echo "---------------"
      pip show onnx
      echo "---------------"
      pip show onnxruntime
      echo "---------------"
      pip show onnxconverter-common
      echo "---------------"
      pip show scikit-learn
      echo "---------------"
    displayName: 'version'

  - script: |
      call activate skl2onnxEnvironment
      if "$(onnx.target_opset)" neq "" set TEST_TARGET_OPSET=$(onnx.target_opset)
      python -m pytest tests --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      call activate skl2onnxEnvironment
      if "$(onnx.target_opset)" neq "" set TEST_TARGET_OPSET=$(onnx.target_opset)
      pip install lightgbm xgboost
      pip install --no-deps onnxmltools
    displayName: 'install onnxmltools'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
