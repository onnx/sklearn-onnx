# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      #Py37-Onnx141-Rt021-Npy1161:
      #  python.version: '3.7.0'
      #  onnx.version: 'https://xadupre.github.io/releases/onnx-1.4.1-cp37-cp37m-win_amd64.whl'
      #  numpy.version: 'http://???????/numpy-1.16.1+mkl-cp37-cp37m-win_amd64.whl'
      #  scipy.version: 'https://xadupre.github.io/releases/scipy-1.2.1-cp37-cp37m-win_amd64.whl'
      #  onnxrt.version: '==0.2.1'
      Py36-Onnx130-Rt014-Npy1154:
        python.version: '3.6.7'
        onnx.version: 'onnx==1.3.0'
        numpy.version: 'numpy==1.15.4'
        scipy.version: 'scipy'
        onnxrt.version: '==0.1.4'
    maxParallel: 3

  steps:
  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: false
      packageSpecs: 'python=$(python.version)'

  - script: |
      conda install -y -c anaconda scikit-learn
    displayName: 'Install numpy mkl scipy pandas sklearn'

  - script: |
      conda install -y -c conda-forge protobuf
      python -m pip install --upgrade pip
      pip install $(numpy.version)
      pip install $(scipy.version)
      pip install $(onnx.version)
    displayName: 'Install numpy, scipy, onnx'
    
  - script: |
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
      pip install pytest
    displayName: 'Install dependencies'
    
  - script: |
      pip install onnxruntime$(onnxrt.version)
    displayName: 'install onnxruntime'
    
  - script: |
      pip install -e .
    displayName: 'install skl2onnx'

  - script: |
      python -c "import numpy;print('numpy:',numpy.__version__)"
      python -c "import scipy;print('scipy:',scipy.__version__)"
      python -c "import onnx;print('onnx:',onnx.__version__)"
      python -c "import onnxruntime;print('onnxruntime:',onnxruntime.__version__)"
    displayName: 'version'

  - script: |
      pytest tests --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      pip install onnxmltools openpyxl
      coverage run --include=skl2onnx/** tests/benchmark.py
      coverage report -m
      coverage html
    displayName: 'coverage'

  - script: |
      python tests/benchmark.py
    displayName: 'benchmark'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
