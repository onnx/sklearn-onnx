# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Py37-Onnx150-Rt050-Skl021:
        do.bench: '0'
        python.version: '3.7'
        numpy.version: '==1.17.0'
        onnx.version: '==1.5.0'
        onnxrt.version: '==0.5.0'
        sklearn.version: '==0.21.3'
      Py37-Onnx150-Rt040-Skl020:
        do.bench: '0'
        python.version: '3.7'
        numpy.version: '==1.17.0'
        onnx.version: '==1.5.0'
        onnxrt.version: '==0.4.0'
        sklearn.version: '==0.20.3'
      Py36-Onnx141-Rt030-Skl020:
        do.bench: '0'
        python.version: '3.6'
        numpy.version: '==1.16.3'
        onnx.version: '==1.4.1'
        onnxrt.version: '==0.3.0'
        sklearn.version: '==0.20.3'
      Py36-Onnx130-Rt021-Skl020:
        do.bench: '0'
        python.version: '3.6'
        numpy.version: '==1.16.3'
        onnx.version: '==1.3.0'
        onnxrt.version: '==0.2.1'
        sklearn.version: '==0.20.3'
      Py35-Onnx150-Rt021-Skl019:
        do.bench: '0'
        python.version: '3.5'
        numpy.version: '==1.16.3'
        onnx.version: '==1.5.0'
        onnxrt.version: '==0.2.1'
        sklearn.version: '==0.19.2'
    maxParallel: 3

  steps:
  - script: |
      sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      test '$(python.version)' == '3.7' && apt-get install protobuf-compiler libprotoc-dev
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge numpy$(numpy.version)
      conda install protobuf
      python -m pip install --upgrade pip
    displayName: 'Install environment'

  - script: |
      pip install numpy$(numpy.version)
    displayName: 'install numpy'

  - script: |
      if [ '$(sklearn.version)' == 'git' ]
        then
          git clone https://github.com/scikit-learn/scikit-learn.git --recursive
          python setup.py install
        else
          pip install scikit-learn$(sklearn.version)
      fi
    displayName: 'install scikit-learn'

  - script: |
      if [ '$(onnx.version)' == 'git' ]
        then
          git clone https://github.com/onnx/onnx.git --recursive
          export ONNX_ML=1
          cd onnx
          python setup.py install
          cd ..
        else
          pip install onnx$(onnx.version)
      fi
    displayName: 'install onnx'

  - script: |
      pip install flake8
    displayName: 'install flake8'

  - script: |
      pip install onnxruntime$(onnxrt.version)
    displayName: 'install onnxruntime'

  - script: |
      pip install -r requirements.txt
      git clone https://github.com/microsoft/onnxconverter-common
      cd onnxconverter-common
      pip install -e .
      cd ..
      pip install -r requirements-dev.txt
      pip install pytest
    displayName: 'install requirements'

  - script: |
      pip install -e .
    displayName: 'install'

  - script: |
      echo "---------------"
      pip show numpy
      echo "---------------"
      pip show onnx
      echo "---------------"
      pip show onnxruntime
      echo "---------------"
      pip show onnxconverter-common
      echo "---------------"
      pip show scikit-learn
      echo "---------------"
    displayName: 'version'

  - script: |
      pytest tests --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      pip install lightgbm xgboost
      pip install onnxmltools --no-deps
    displayName: 'install onnxmltools'

  - script: |
      pytest tests_onnxmltools
    displayName: 'pytest-onnxmltools'
    condition: ne(variables['onnxrt.version'], '==0.2.1')

  - script: |
      pip install matplotlib pydot
    displayName: 'install modules for examples'
    condition: eq(variables['onnxrt.version'], '==0.5.0')

  - script: |
      pytest docs/tests
    displayName: 'pytest-examples'
    condition: eq(variables['onnxrt.version'], '==0.5.0')

  # Check flake8 after the tests to get more feedback.
  # It is checked before the tests on the windows build.
  - script: |
      flake8 skl2onnx tests
      flake8 skl2onnx tests_onnxmltools
    displayName: 'flake8'

  - script: |
      if [ '$(do.bench)' == '1' ]
        then
          pip install onnxmltools openpyxl
          coverage run --include=skl2onnx/** tests/benchmark.py
          coverage report -m
          coverage html
      fi
    displayName: 'coverage'

  - script: |
      if [ '$(do.bench)' == '1' ]
        then
          python tests/benchmark.py
      fi
    displayName: 'benchmark'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
