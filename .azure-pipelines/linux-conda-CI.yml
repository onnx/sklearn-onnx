# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'CI_Linux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:

      Py310-Onnx120-Rt1201-Skl11:
        do.bench: '0'
        python.version: '3.10'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.12.0' #'-i https://test.pypi.org/simple/ onnx==1.12.0rc4'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.12.1' # -i https://test.pypi.org/simple/ ort-nightly==1.11.0.dev20220311003
        sklearn.version: '>=1.1.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '1'
      Py39-Onnx120-Rt1111-Skl11:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.12.0' #'-i https://test.pypi.org/simple/ onnx==1.12.0rc4'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.11.1' # -i https://test.pypi.org/simple/ ort-nightly==1.11.0.dev20220311003
        sklearn.version: '>=1.1'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1110-Rt1111-Skl11:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.11.0' # '-i https://test.pypi.org/simple/ onnx==1.11.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.11.1' # -i https://test.pypi.org/simple/ ort-nightly==1.11.0.dev20220311003
        sklearn.version: '>=1.1'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1110-Rt1111-Skl10:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.11.0' # '-i https://test.pypi.org/simple/ onnx==1.11.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.11.1' # -i https://test.pypi.org/simple/ ort-nightly==1.11.0.dev20220311003
        sklearn.version: '==1.0.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1110-Rt1100-Skl10:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.11.0' # '-i https://test.pypi.org/simple/ onnx==1.11.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.10.0'  # '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==1.0.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1102-Rt110-Skl10:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.10.2'  # 'test'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.10.0'  # '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==1.0.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1101-Rt190-Skl10:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.10.1'  # 'test'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.9.0'  # '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==1.0.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1101-Rt190-Skl0242:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '<1.21.0'
        scipy.version: ''
        onnx.version: 'onnx==1.10.1'  # 'test'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.9.0'  # '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==0.24.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx1101-Rt181-Skl0242:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '<1.21.0'
        scipy.version: ''
        onnx.version: 'onnx==1.10.1'  # 'test'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.8.1'  # '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '>=0.24.2'
        lgbm.version: '==3.2.0'
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'
      Py39-Onnx190-Rt180-Skl0242:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '<1.21.0'
        scipy.version: ''
        onnx.version: 'onnx==1.9.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime>=1.8.1'  # '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '>=0.24.2'
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'  # git
        run.example: '0'

    maxParallel: 3

  steps:
  - script: |
      sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      test '$(python.version)' == '3.7' && apt-get install protobuf-compiler libprotoc-dev
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge "numpy$(numpy.version)"
      conda install protobuf
      python -m pip install --upgrade pip
    displayName: 'Install environment'

  - script: |
      conda install "numpy$(numpy.version)" "scipy$(scipy.version)"
    displayName: 'install numpy, scipy'

  - script: |
      if [ '$(sklearn.version)' == 'git' ]
        then
          git clone https://github.com/scikit-learn/scikit-learn.git --recursive
          python setup.py install
        else
          conda install -c conda-forge "scikit-learn$(sklearn.version)"
      fi
    displayName: 'install scikit-learn'

  - script: |
      if [ '$(onnx.version)' == 'git' ]
        then
          pip install typing-extensions>=3.6.2.1
          git clone https://github.com/onnx/onnx.git --recursive
          export ONNX_ML=1
          cd onnx
          python setup.py install
          cd ..
        else
          if [ '$(onnx.version)' == 'test' ]
          then
            pip install typing-extensions>=3.6.2.1
            pip install -i https://test.pypi.org/simple/ onnx
          else
            pip install typing-extensions>=3.6.2.1
            pip install $(onnx.version)
          fi
      fi
    displayName: 'install onnx'

  - script: |
      pip install flake8
    displayName: 'install flake8'

  - script: |
      pip install $(onnxrt.version)
    displayName: 'install onnxruntime'

  - script: |
      if [ '$(onnxcc.version)' == 'git' ]
      then
        pip install git+https://github.com/microsoft/onnxconverter-common
      else
        pip install onnxconverter-common$(onnxcc.version)
      fi
    displayName: 'install onnxconverter-common'

  - script: |
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
    displayName: 'install requirements'

  - script: |
      pip install -e .
    displayName: 'install'

  - script: |
      echo "---------------"
      pip show numpy
      echo "---------------"
      pip show scipy
      echo "---------------"
      pip show pandas
      echo "---------------"
      pip show onnx
      echo "---------------"
      pip show onnxruntime
      echo "---------------"
      pip show onnxconverter-common
      echo "---------------"
      pip show scikit-learn
      echo "---------------"
      pip show onnxmltools
      echo "---------------"
    displayName: 'version'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      cd tests
      python -c "from onnxruntime import __version__;print('onnxruntime', __version__)"
      python -c "from onnx import __version__;print('onnx', __version__)"
      python -c "from skl2onnx import __max_supported_opset__;print('__max_supported_opset__', __max_supported_opset__)"
      python -c "import test_utils;print('max_onnxruntime_opset', test_utils.max_onnxruntime_opset())"
      python -c "import test_utils;print('TARGET OPSET, IR', test_utils.TARGET_OPSET, test_utils.TARGET_IR)"
      python -c "import onnx.defs;print('onnx_opset_version', onnx.defs.onnx_opset_version())"
      cd ..
    displayName: 'target_opset'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest tests --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      conda install -c conda-forge "lightgbm${lgbm.version}" xgboost --no-deps
      pip install xgboost lightgbm hummingbird-ml hummingbird
      pip install --no-deps git+https://github.com/microsoft/onnxconverter-common.git
      pip install onnxmltools
    displayName: 'install onnxmltools'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest tests_onnxmltools --durations=0 --basetemp=temp
    displayName: 'pytest-onnxmltools'

  # Check flake8 after the tests to get more feedback.
  # It is checked before the tests on the windows build.
  - script: |
      flake8 skl2onnx tests tests_onnxmltools
    displayName: 'flake8'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      if [ '$(do.bench)' == '1' ]
        then
          pip install openpyxl
          coverage run --include=skl2onnx/** tests/benchmark.py
          coverage report -m
          coverage html
      fi
    displayName: 'coverage'

  - script: |
      pip install -r docs/requirements.txt
      pip uninstall -y skl2onnx
      python setup.py install
      pip install --no-deps git+https://github.com/microsoft/onnxconverter-common.git
      pip install --no-deps git+https://github.com/onnx/onnxmltools.git
    displayName: 'install for documentation'
    condition: eq(variables['run.example'], '1')

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest docs/tests --durations=0 --basetemp=temp --doctest-modules -v -v
    displayName: 'run documentation examples'
    condition: eq(variables['run.example'], '1')

  # dot cannot be found but is missing to build the documentation
  #- script: |
  #    if [ '$(onnx.target_opset)' != '' ]
  #    then
  #      export TEST_TARGET_OPSET="$(onnx.target_opset)"
  #    fi
  #    conda install -c anaconda graphviz
  #    python -m sphinx -j2 -v -N -T -b html -d build/doctrees docs dist/html
  #  displayName: 'build documentation'
  #  condition: eq(variables['run.example'], '1')

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      if [ '$(do.bench)' == '1' ]
        then
          python tests/benchmark.py
      fi
    displayName: 'benchmark'
    condition: eq(variables['run.example'], '0')

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
