# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'CI_Linux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:

      Py311-Onnx160-Rt171-Skl140:
        do.bench: '0'
        python.version: '3.11'  # onnxruntime-extensions needs to be update to switch to 3.12
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.16.0'  # -i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.17.1'
        sklearn.version: '>=1.4.0'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '1'

      Py311-Onnx150-Rt170-Skl140:
        do.bench: '0'
        python.version: '3.11'  # onnxruntime-extensions needs to be update to switch to 3.12
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.15.0'  # -i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.17.0'
        sklearn.version: '>=1.4.0'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py311-Onnx150-Rt163-Skl140:
        do.bench: '0'
        python.version: '3.11'
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.15.0'  # -i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.16.3'
        sklearn.version: '==1.4.0'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py311-Onnx150-Rt161-Skl132:
        do.bench: '0'
        python.version: '3.11'
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.15.0'  # -i https://test.pypi.org/simple/ onnx==1.15.0rc2'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.16.1'
        sklearn.version: '==1.3.2'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py311-Onnx141-Rt160-Skl131:
        do.bench: '0'
        python.version: '3.11'
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.14.1'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.16.0'
        sklearn.version: '==1.3.1'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py311-Onnx140-Rt151-Skl130:
        do.bench: '0'
        python.version: '3.11'
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.14.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.15.1'
        sklearn.version: '==1.3.0'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py310-Onnx140-Rt140-Skl122:
        do.bench: '0'
        python.version: '3.10'
        numpy.version: '>=1.21.1'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.14.1'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.14.0'
        sklearn.version: '==1.2.2'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py310-Onnx130-Rt140-Skl121:
        do.bench: '0'
        python.version: '3.10'
        numpy.version: '>=1.21.2'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.13.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.14.0'
        sklearn.version: '==1.2.1'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py310-Onnx130-Rt131-Skl120:
        do.bench: '0'
        python.version: '3.10'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.13.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.13.1'
        sklearn.version: '==1.2.0'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py310-Onnx120-Rt131-Skl120:
        do.bench: '0'
        python.version: '3.10'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.12.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.13.1'
        sklearn.version: '==1.2.0'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py310-Onnx120-Rt1201-Skl11:
        do.bench: '0'
        python.version: '3.10'
        numpy.version: '>=1.21.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.12.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.12.1'
        sklearn.version: '==1.1.3'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

      Py39-Onnx120-Rt1111-Skl11:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0,<1.23.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.12.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.11.1'
        sklearn.version: '==1.1.3'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'
      Py39-Onnx1110-Rt1111-Skl11:
        do.bench: '0'
        python.version: '3.9'
        numpy.version: '>=1.21.0,<1.23.0'
        scipy.version: '>=1.7.0'
        onnx.version: 'onnx==1.11.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.11.1'
        sklearn.version: '==1.1.3'
        pandas.version: ''
        lgbm.version: ''
        onnxcc.version: '>=1.8.1'
        run.example: '0'

    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      addToPath: true
      architecture: 'x64'
    displayName: 'Use Python $(python.version)'

  - script: |
      sudo apt-get install -y language-pack-en
      sudo locale-gen en_US.UTF-8
      sudo update-locale LANG=en_US.UTF-8
    displayName: 'Install packages'

  - script: |
      pip install "numpy$(numpy.version)"
      pip install "scipy$(scipy.version)"
      pip install protobuf
      python -m pip install --upgrade pip
    displayName: 'Install environment'

  - script: |
      if [ '$(sklearn.version)' == 'git' ]
        then
          git clone https://github.com/scikit-learn/scikit-learn.git --recursive
          python setup.py install
        else
          pip install "scikit-learn$(sklearn.version)"
      fi
    displayName: 'install scikit-learn'

  - script: |
      pip install $(onnx.version) $(onnxrt.version)
    displayName: 'install onnxruntime, onnx'

  - script: |
      if [ '$(onnxcc.version)' == 'git' ]
      then
        pip install git+https://github.com/microsoft/onnxconverter-common --no-deps
      else
        pip install onnxconverter-common$(onnxcc.version) --no-deps
      fi
    displayName: 'install onnxconverter-common'

  - script: |
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
    displayName: 'install requirements'

  - script: |
      pip show onnx
    displayName: 'onnx version'

  - script: |
      pip install $(onnx.version) $(onnxrt.version) "numpy$(numpy.version)" scikit-learn$(sklearn.version) scipy$(scipy.version) "pandas$(pandas.version)"
    displayName: install onnxruntime, onnx, numpy, scikit-learn, pandas again  # to make sure the proper version is installed

  - script: |
      pip install -e .
    displayName: 'install'

  - script: |
      echo "---------------"
      pip show numpy
      echo "---------------"
      pip show pandas
      echo "---------------"
      pip show scipy
      echo "---------------"
      pip show pandas
      echo "---------------"
      pip show onnx
      echo "---------------"
      pip show onnxruntime
      echo "---------------"
      pip show onnxconverter-common
      echo "---------------"
      pip show scikit-learn
      echo "---------------"
      pip show onnxmltools
      echo "---------------"
    displayName: 'version'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      cd tests
      python -c "from numpy import __version__;print('numpy', __version__)"
      python -c "from pandas import __version__;print('pandas', __version__)"
      python -c "from scipy import __version__;print('scipy', __version__)"
      python -c "from sklearn import __version__;print('sklearn', __version__)"
      python -c "from onnxruntime import __version__;print('onnxruntime', __version__)"
      python -c "from onnx import __version__;print('onnx', __version__)"
      python -c "from skl2onnx import __max_supported_opset__;print('__max_supported_opset__', __max_supported_opset__)"
      python -c "import test_utils;print('max_onnxruntime_opset', test_utils.max_onnxruntime_opset())"
      python -c "import test_utils;print('TARGET OPSET, IR', test_utils.TARGET_OPSET, test_utils.TARGET_IR)"
      python -c "import onnx.defs;print('onnx_opset_version', onnx.defs.onnx_opset_version())"
      cd ..
    displayName: 'target_opset'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest tests --maxfail=10 --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      # some of this is triggering the following error when importing scipy on python 3.10
      # ImportError: /lib/x86_64-linux-gnu/libstdc++.so.6: version `GLIBCXX_3.4.29'
      conda install -c conda-forge "lightgbm${lgbm.version}" "xgboost<2" --no-deps
      pip install hummingbird-ml hummingbird "xgboost<2" lightgbm
      pip install --no-deps git+https://github.com/microsoft/onnxconverter-common.git
      pip install onnxmltools
    displayName: 'install onnxmltools'
    condition: eq(variables['run.example'], '1')

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest tests_onnxmltools --durations=0 --basetemp=temp --maxfail=5
    displayName: 'pytest-onnxmltools'
    condition: eq(variables['run.example'], '1')

  - script: |
      python -m pip install ruff
      ruff skl2onnx tests tests_onnxmltools
    displayName: 'ruff'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      if [ '$(do.bench)' == '1' ]
        then
          pip install openpyxl
          coverage run --include=skl2onnx/** tests/benchmark.py
          coverage report -m
          coverage html
      fi
    displayName: 'coverage'

  - script: |
      pip install -r docs/requirements.txt
      pip uninstall -y skl2onnx
      python setup.py install
      pip install --no-deps git+https://github.com/microsoft/onnxconverter-common.git
      pip install --no-deps git+https://github.com/onnx/onnxmltools.git
    displayName: 'install for documentation'
    condition: eq(variables['run.example'], '1')

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest docs/tests --durations=0 --basetemp=temp --doctest-modules -v -v --maxfail=5
    displayName: 'run documentation examples'
    condition: eq(variables['run.example'], '1')

  # dot cannot be found but is missing to build the documentation
  #- script: |
  #    if [ '$(onnx.target_opset)' != '' ]
  #    then
  #      export TEST_TARGET_OPSET="$(onnx.target_opset)"
  #    fi
  #    conda install -c anaconda graphviz
  #    python -m sphinx -j2 -v -N -T -b html -d build/doctrees docs dist/html
  #  displayName: 'build documentation'
  #  condition: eq(variables['run.example'], '1')

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      if [ '$(do.bench)' == '1' ]
        then
          python tests/benchmark.py
      fi
    displayName: 'benchmark'
    condition: eq(variables['run.example'], '0')

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
