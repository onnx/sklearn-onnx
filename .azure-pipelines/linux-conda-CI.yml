# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Py37-Onnx170-Rt160-Skl0232:
        do.bench: '0'
        python.version: '3.7'
        numpy.version: '>=1.18.1'
        onnx.version: '==1.7.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.6.0'
        sklearn.version: '==0.23.2'
        onnxcc.version: '==1.7.0'
        run.example: '1'
      Py37-Onnx170-Rt152-Skl0232:
        do.bench: '0'
        python.version: '3.7'
        numpy.version: '>=1.18.1'
        onnx.version: '==1.7.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.5.2'
        sklearn.version: '==0.23.2'
        onnxcc.version: '==1.7.0'
        run.example: '1'
      Py38-Onnx170-Rt160-Skl0232:
        do.bench: '0'
        python.version: '3.8'
        numpy.version: '>=1.18.1'
        onnx.version: '==1.7.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.6.0'
        sklearn.version: '==0.23.2'
        onnxcc.version: '==1.7.0'
        run.example: '1'
      Py38-Onnx170-Rt152-Skl0232:
        do.bench: '0'
        python.version: '3.8'
        numpy.version: '>=1.18.1'
        onnx.version: '==1.7.0'
        onnx.target_opset: ''
        onnxrt.version: 'onnxruntime==1.5.2'
        sklearn.version: '==0.23.2'
        onnxcc.version: '==1.7.0'
        run.example: '1'
    maxParallel: 3

  steps:
  - script: |
      sudo install -d -m 0777 /home/vsts/.conda/envs
    displayName: Fix Conda permissions

  - task: CondaEnvironment@1
    inputs:
      createCustomEnvironment: true
      environmentName: 'py$(python.version)'
      packageSpecs: 'python=$(python.version)'

  - script: |
      test '$(python.version)' == '3.7' && apt-get install protobuf-compiler libprotoc-dev
      conda config --set always_yes yes --set changeps1 no
      conda install -c conda-forge "numpy$(numpy.version)"
      conda install protobuf
      python -m pip install --upgrade pip
    displayName: 'Install environment'

  - script: |
      conda install "numpy$(numpy.version)"
    displayName: 'install numpy'

  - script: |
      if [ '$(sklearn.version)' == 'git' ]
        then
          git clone https://github.com/scikit-learn/scikit-learn.git --recursive
          python setup.py install
        else
          pip install scikit-learn$(sklearn.version)
      fi
    displayName: 'install scikit-learn'

  - script: |
      if [ '$(onnx.version)' == 'git' ]
        then
          git clone https://github.com/onnx/onnx.git --recursive
          export ONNX_ML=1
          cd onnx
          python setup.py install
          cd ..
        else
          if [ '$(onnx.version)' == 'test' ]
          then
            pip install typing-extensions
            pip install -i https://test.pypi.org/simple/ onnx
          else
            pip install onnx$(onnx.version)
          fi
      fi
    displayName: 'install onnx'

  - script: |
      pip install flake8
    displayName: 'install flake8'

  - script: |
      pip install $(onnxrt.version)
    displayName: 'install onnxruntime'

  - script: |
      if [ '$(onnxcc.version)' == 'git' ]
      then
        pip install git+https://github.com/microsoft/onnxconverter-common
      else
        pip install onnxconverter-common$(onnxcc.version)
      fi
    displayName: 'install onnxconverter-common'

  - script: |
      pip install -r requirements.txt
      pip install -r requirements-dev.txt
    displayName: 'install requirements'

  - script: |
      pip install -e .
    displayName: 'install'

  - script: |
      echo "---------------"
      pip show numpy
      echo "---------------"
      pip show pandas
      echo "---------------"
      pip show onnx
      echo "---------------"
      pip show onnxruntime
      echo "---------------"
      pip show onnxconverter-common
      echo "---------------"
      pip show scikit-learn
      echo "---------------"
    displayName: 'version'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      cd tests
      python -c "import test_utils;print(test_utils.TARGET_OPSET, test_utils.TARGET_IR)"
      cd ..
    displayName: 'target_opset'

  - script: |
      cd benchmarks
      python -u bench_plot_onnxruntime_linreg.py
      cd ..
    displayName: 'bench_plot_onnxruntime_linreg.py'

  - script: |
      cd benchmarks
      python -u bench_plot_onnxruntime_logreg.py
      cd ..
    displayName: 'bench_plot_onnxruntime_logreg.py'

  - script: |
      cd benchmarks
      python -u bench_plot_onnxruntime_random_forest_reg.py
      cd ..
    displayName: 'bench_plot_onnxruntime_random_forest_reg.py'

  - script: |
      cd benchmarks
      python -u bench_plot_onnxruntime_svm_reg.py
      cd ..
    displayName: 'bench_plot_onnxruntime_svm_reg.py'

  - script: |
      if [ '$(onnx.target_opset)' != '' ]
      then
        export TEST_TARGET_OPSET="$(onnx.target_opset)"
      fi
      pytest tests --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  # Check flake8 after the tests to get more feedback.
  # It is checked before the tests on the windows build.
  - script: |
      flake8 skl2onnx tests tests_onnxmltools
    displayName: 'flake8'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
