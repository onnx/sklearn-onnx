# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

jobs:

- job: 'Test'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Py37-Onnx160-nightlyRT-Npy1180-Sk0221:
        python.version: '3.7'
        onnx.version: 'onnx==1.6.0'
        numpy.version: 'numpy==1.18.0'
        scipy.version: 'scipy'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==0.22.1'
      Py37-Onnx150-nightlyRT-Npy1180-Sk0213:
        python.version: '3.7'
        onnx.version: 'onnx==1.5.0'
        numpy.version: 'numpy==1.18.0'
        scipy.version: 'scipy'
        onnxrt.version: '-i https://test.pypi.org/simple/ ort-nightly'
        sklearn.version: '==0.21.3'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    displayName: Add conda to PATH

  - script: conda create --yes --quiet --name py$(python.version) -c conda-forge python=$(python.version) protobuf
    displayName: Create Anaconda environment

  - script: |
      call activate py$(python.version)
      python -m pip install --upgrade pip
      pip install $(numpy.version)
      conda install $(scipy.version)
      pip install $(onnx.version)
      pip install openpyxl
    displayName: 'Install numpy, scipy, onnx'

  - script: |
      call activate py$(python.version)
      pip install -r requirements.txt
      git clone https://github.com/microsoft/onnxconverter-common
      cd onnxconverter-common
      pip install -e .
      cd ..
      pip install -r requirements-dev.txt
      pip install pytest
    displayName: 'install requirements'

  - script: |
      call activate py$(python.version)
      pip install $(onnxrt.version)
    displayName: 'install onnxruntime'

  - script: |
      pip install scikit-learn$(sklearn.version)
    displayName: 'install scikit-learn'

  - script: |
      call activate py$(python.version)
      pip install -e .
    displayName: 'install skl2onnx'

  - script: |
      call activate py$(python.version)
      python -c "import numpy;print('numpy:',numpy.__version__)"
      python -c "import scipy;print('scipy:',scipy.__version__)"
      python -c "import sklearn;print('sklearn:',sklearn.__version__)"
      python -c "import onnx;print('onnx:',onnx.__version__)"
      python -c "import onnxconverter_common;print('onnxconverter-common:',onnxconverter_common.__version__)"
      python -c "import onnxruntime;print('onnxruntime:',onnxruntime.__version__)"
    displayName: 'version'

  - script: |
      call activate py$(python.version)
      pytest tests --durations=0 --basetemp=temp --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'

  - script: |
      call activate py$(python.version)
      python -m pip install openpyxl
      python tests/benchmark.py
    displayName: 'benchmark'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testCoverageFiles: 'htmlcov/**'
      testBenchmarkFiles: 'TESTDUMP/*.xlsx'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
