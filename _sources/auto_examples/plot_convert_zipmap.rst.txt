
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_convert_zipmap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_convert_zipmap.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_convert_zipmap.py:


.. _l-rf-example-zipmap:

Probabilities as a vector or as a ZipMap
========================================

A classifier usually returns a matrix of probabilities.
By default, *sklearn-onnx* converts that matrix
into a list of dictionaries where each probabilies is mapped
to its class id or name. That mechanism retains the class names.
This conversion increases the prediction time and is not
always needed. Let's see how to deactivate this behaviour
on the Iris example.

.. contents::
    :local:

Train a model and convert it
++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 25-48

.. code-block:: default

    from timeit import repeat
    import numpy
    import sklearn
    from sklearn.datasets import load_iris
    from sklearn.model_selection import train_test_split
    import onnxruntime as rt
    import onnx
    import skl2onnx
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx import convert_sklearn
    from sklearn.linear_model import LogisticRegression

    iris = load_iris()
    X, y = iris.data, iris.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    clr = LogisticRegression(max_iter=500)
    clr.fit(X_train, y_train)
    print(clr)

    initial_type = [('float_input', FloatTensorType([None, 4]))]
    onx = convert_sklearn(clr, initial_types=initial_type,
                          target_opset=12)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LogisticRegression(max_iter=500)




.. GENERATED FROM PYTHON SOURCE LINES 49-54

Output type
+++++++++++

Let's confirm the output type of the probabilities
is a list of dictionaries with onnxruntime.

.. GENERATED FROM PYTHON SOURCE LINES 54-61

.. code-block:: default


    sess = rt.InferenceSession(onx.SerializeToString())
    res = sess.run(None, {'float_input': X_test.astype(numpy.float32)})
    print(res[1][:2])
    print("probabilities type:", type(res[1]))
    print("type for the first observations:", type(res[1][0]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [{0: 0.9740292429924011, 1: 0.02597067318856716, 2: 8.138414386849036e-08}, {0: 0.9552595019340515, 1: 0.04473908618092537, 2: 1.4489294244413031e-06}]
    probabilities type: <class 'list'>
    type for the first observations: <class 'dict'>




.. GENERATED FROM PYTHON SOURCE LINES 62-66

Without ZipMap
++++++++++++++

Let's remove the ZipMap operator.

.. GENERATED FROM PYTHON SOURCE LINES 66-78

.. code-block:: default


    initial_type = [('float_input', FloatTensorType([None, 4]))]
    options = {id(clr): {'zipmap': False}}
    onx2 = convert_sklearn(clr, initial_types=initial_type, options=options,
                           target_opset=12)

    sess2 = rt.InferenceSession(onx2.SerializeToString())
    res2 = sess2.run(None, {'float_input': X_test.astype(numpy.float32)})
    print(res2[1][:2])
    print("probabilities type:", type(res2[1]))
    print("type for the first observations:", type(res2[1][0]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[9.7402924e-01 2.5970673e-02 8.1384144e-08]
     [9.5525950e-01 4.4739086e-02 1.4489294e-06]]
    probabilities type: <class 'numpy.ndarray'>
    type for the first observations: <class 'numpy.ndarray'>




.. GENERATED FROM PYTHON SOURCE LINES 79-85

One output per class
++++++++++++++++++++

This options removes the final operator ZipMap and splits
the probabilities into columns. The final model produces
one output for the label, and one output per class.

.. GENERATED FROM PYTHON SOURCE LINES 85-97

.. code-block:: default


    options = {id(clr): {'zipmap': 'columns'}}
    onx3 = convert_sklearn(clr, initial_types=initial_type, options=options,
                           target_opset=12)

    sess3 = rt.InferenceSession(onx3.SerializeToString())
    res3 = sess3.run(None, {'float_input': X_test.astype(numpy.float32)})
    for i, out in enumerate(sess3.get_outputs()):
        print("output: '{}' shape={} values={}...".format(
            out.name, res3[i].shape, res3[i][:2]))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    output: 'output_label' shape=(38,) values=[0 0]...
    output: 'i0' shape=(38,) values=[0.97402924 0.9552595 ]...
    output: 'i1' shape=(38,) values=[0.02597067 0.04473909]...
    output: 'i2' shape=(38,) values=[8.1384144e-08 1.4489294e-06]...




.. GENERATED FROM PYTHON SOURCE LINES 98-100

Let's compare prediction time
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 100-122

.. code-block:: default


    X32 = X_test.astype(numpy.float32)

    print("Time with ZipMap:")
    print(repeat(lambda: sess.run(None, {'float_input': X32}),
                 number=100, repeat=10))

    print("Time without ZipMap:")
    print(repeat(lambda: sess2.run(None, {'float_input': X32}),
                 number=100, repeat=10))

    print("Time without ZipMap but with columns:")
    print(repeat(lambda: sess3.run(None, {'float_input': X32}),
                 number=100, repeat=10))

    # The prediction is much faster without ZipMap
    # on this example.
    # The optimisation is even faster when the classes
    # are described with strings and not integers
    # as the final result (list of dictionaries) may copy
    # many times the same information with onnxruntime.





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time with ZipMap:
    [0.008652899999997743, 0.01111489999999904, 0.0073563999999990415, 0.005587999999999482, 0.0052616999999983705, 0.006268999999999636, 0.0053666999999997245, 0.005609799999998444, 0.005392100000001676, 0.005355099999999169]
    Time without ZipMap:
    [0.0038423999999999126, 0.0038285999999985165, 0.003878399999997839, 0.0038626999999991085, 0.0036394000000008475, 0.003767999999997329, 0.003934199999999777, 0.003919800000002027, 0.0035841000000012, 0.003336299999997294]
    Time without ZipMap but with columns:
    [0.004791700000001953, 0.005019799999999464, 0.0039042999999985284, 0.003772300000001394, 0.003841900000001175, 0.003712900000000019, 0.0038093000000003485, 0.004272200000002613, 0.004806000000002086, 0.004583900000000085]




.. GENERATED FROM PYTHON SOURCE LINES 123-124

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 124-130

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.0
    scikit-learn: 0.24.2
    onnx:  1.9.0
    onnxruntime:  1.8.0
    skl2onnx:  1.9.1.dev





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.371 seconds)


.. _sphx_glr_download_auto_examples_plot_convert_zipmap.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_convert_zipmap.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_convert_zipmap.py <plot_convert_zipmap.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_convert_zipmap.ipynb <plot_convert_zipmap.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
