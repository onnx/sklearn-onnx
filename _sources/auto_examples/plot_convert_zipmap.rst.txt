
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_convert_zipmap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_convert_zipmap.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_convert_zipmap.py:


.. _l-rf-example-zipmap:

Probabilities as a vector or as a ZipMap
========================================

A classifier usually returns a matrix of probabilities.
By default, *sklearn-onnx* converts that matrix
into a list of dictionaries where each probabily is mapped
to its class id or name. That mechanism retains the class names.
This conversion increases the prediction time and is not
always needed. Let's see how to deactivate this behaviour
on the Iris example.

Train a model and convert it
++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 22-45

.. code-block:: Python


    from timeit import repeat
    import numpy
    import sklearn
    from sklearn.datasets import load_iris
    from sklearn.model_selection import train_test_split
    import onnxruntime as rt
    import onnx
    import skl2onnx
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx import convert_sklearn
    from sklearn.linear_model import LogisticRegression

    iris = load_iris()
    X, y = iris.data, iris.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    clr = LogisticRegression(max_iter=500)
    clr.fit(X_train, y_train)
    print(clr)

    initial_type = [("float_input", FloatTensorType([None, 4]))]
    onx = convert_sklearn(clr, initial_types=initial_type, target_opset=12)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LogisticRegression(max_iter=500)




.. GENERATED FROM PYTHON SOURCE LINES 46-51

Output type
+++++++++++

Let's confirm the output type of the probabilities
is a list of dictionaries with onnxruntime.

.. GENERATED FROM PYTHON SOURCE LINES 51-58

.. code-block:: Python


    sess = rt.InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])
    res = sess.run(None, {"float_input": X_test.astype(numpy.float32)})
    print(res[1][:2])
    print("probabilities type:", type(res[1]))
    print("type for the first observations:", type(res[1][0]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [{0: 0.07156547158956528, 1: 0.9160813689231873, 2: 0.012353206984698772}, {0: 8.799823262961581e-05, 1: 0.10934431850910187, 2: 0.8905677199363708}]
    probabilities type: <class 'list'>
    type for the first observations: <class 'dict'>




.. GENERATED FROM PYTHON SOURCE LINES 59-63

Without ZipMap
++++++++++++++

Let's remove the ZipMap operator.

.. GENERATED FROM PYTHON SOURCE LINES 63-78

.. code-block:: Python


    initial_type = [("float_input", FloatTensorType([None, 4]))]
    options = {id(clr): {"zipmap": False}}
    onx2 = convert_sklearn(
        clr, initial_types=initial_type, options=options, target_opset=12
    )

    sess2 = rt.InferenceSession(
        onx2.SerializeToString(), providers=["CPUExecutionProvider"]
    )
    res2 = sess2.run(None, {"float_input": X_test.astype(numpy.float32)})
    print(res2[1][:2])
    print("probabilities type:", type(res2[1]))
    print("type for the first observations:", type(res2[1][0]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[7.1565472e-02 9.1608137e-01 1.2353207e-02]
     [8.7998233e-05 1.0934432e-01 8.9056772e-01]]
    probabilities type: <class 'numpy.ndarray'>
    type for the first observations: <class 'numpy.ndarray'>




.. GENERATED FROM PYTHON SOURCE LINES 79-85

One output per class
++++++++++++++++++++

This options removes the final operator ZipMap and splits
the probabilities into columns. The final model produces
one output for the label, and one output per class.

.. GENERATED FROM PYTHON SOURCE LINES 85-103

.. code-block:: Python


    options = {id(clr): {"zipmap": "columns"}}
    onx3 = convert_sklearn(
        clr, initial_types=initial_type, options=options, target_opset=12
    )

    sess3 = rt.InferenceSession(
        onx3.SerializeToString(), providers=["CPUExecutionProvider"]
    )
    res3 = sess3.run(None, {"float_input": X_test.astype(numpy.float32)})
    for i, out in enumerate(sess3.get_outputs()):
        print(
            "output: '{}' shape={} values={}...".format(
                out.name, res3[i].shape, res3[i][:2]
            )
        )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    output: 'output_label' shape=(38,) values=[1 2]...
    output: 'i0' shape=(38,) values=[7.156547e-02 8.799823e-05]...
    output: 'i1' shape=(38,) values=[0.91608137 0.10934432]...
    output: 'i2' shape=(38,) values=[0.01235321 0.8905677 ]...




.. GENERATED FROM PYTHON SOURCE LINES 104-106

Let's compare prediction time
+++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 106-125

.. code-block:: Python


    X32 = X_test.astype(numpy.float32)

    print("Time with ZipMap:")
    print(repeat(lambda: sess.run(None, {"float_input": X32}), number=100, repeat=10))

    print("Time without ZipMap:")
    print(repeat(lambda: sess2.run(None, {"float_input": X32}), number=100, repeat=10))

    print("Time without ZipMap but with columns:")
    print(repeat(lambda: sess3.run(None, {"float_input": X32}), number=100, repeat=10))

    # The prediction is much faster without ZipMap
    # on this example.
    # The optimisation is even faster when the classes
    # are described with strings and not integers
    # as the final result (list of dictionaries) may copy
    # many times the same information with onnxruntime.





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Time with ZipMap:
    [0.010032097000021167, 0.01245842299999822, 0.009457742999984475, 0.008190661999833537, 0.008566311000095084, 0.008487106000075073, 0.008385362000126406, 0.008503606999965996, 0.008555368000088492, 0.00829078199990363]
    Time without ZipMap:
    [0.004322446000060154, 0.004467199000146138, 0.00676410399978522, 0.006740812000089136, 0.005239173000063602, 0.00527031799992983, 0.004541967000022851, 0.004477042999951664, 0.004469333999850278, 0.004470136999998431]
    Time without ZipMap but with columns:
    [0.008028657000068051, 0.008175955000069735, 0.008919250999952055, 0.010066999999935433, 0.009950227999979688, 0.009849316000099861, 0.00963781900009053, 0.009465580000096452, 0.00968110799999522, 0.008902125999838972]




.. GENERATED FROM PYTHON SOURCE LINES 126-127

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 127-133

.. code-block:: Python


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    numpy: 2.3.1
    scikit-learn: 1.6.1
    onnx:  1.19.0
    onnxruntime:  1.23.0
    skl2onnx:  1.19.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.368 seconds)


.. _sphx_glr_download_auto_examples_plot_convert_zipmap.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_convert_zipmap.ipynb <plot_convert_zipmap.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_convert_zipmap.py <plot_convert_zipmap.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_convert_zipmap.zip <plot_convert_zipmap.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
