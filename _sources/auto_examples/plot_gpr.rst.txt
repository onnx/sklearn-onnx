
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_gpr.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_gpr.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_gpr.py:


.. _l-gpr-example:

Discrepencies with GaussianProcessorRegressor: use of double
============================================================

The `GaussianProcessRegressor
<https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.
GaussianProcessRegressor.html>`_ involves
many matrix operations which may requires double
precisions. *sklearn-onnx* is using single floats by default
but for this particular model, it is better to use double.
Let's see how to create an ONNX file using doubles.

.. contents::
    :local:

Train a model
+++++++++++++

A very basic example using *GaussianProcessRegressor*
on the Boston dataset.

.. GENERATED FROM PYTHON SOURCE LINES 27-47

.. code-block:: default

    import pprint
    import numpy
    import sklearn
    from sklearn.datasets import load_boston
    from sklearn.gaussian_process import GaussianProcessRegressor
    from sklearn.gaussian_process.kernels import DotProduct, RBF
    from sklearn.model_selection import train_test_split
    import onnx
    import onnxruntime as rt
    import skl2onnx
    from skl2onnx.common.data_types import FloatTensorType, DoubleTensorType
    from skl2onnx import convert_sklearn

    bost = load_boston()
    X, y = bost.data, bost.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    gpr = GaussianProcessRegressor(DotProduct() + RBF(), alpha=1.)
    gpr.fit(X_train, y_train)
    print(gpr)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    GaussianProcessRegressor(alpha=1.0,
                             kernel=DotProduct(sigma_0=1) + RBF(length_scale=1))




.. GENERATED FROM PYTHON SOURCE LINES 48-53

First attempt to convert a model into ONNX
++++++++++++++++++++++++++++++++++++++++++

The documentation suggests the following way to
convert a model into ONNX.

.. GENERATED FROM PYTHON SOURCE LINES 53-65

.. code-block:: default


    initial_type = [('X', FloatTensorType([None, X_train.shape[1]]))]
    onx = convert_sklearn(gpr, initial_types=initial_type,
                          target_opset=12)

    sess = rt.InferenceSession(onx.SerializeToString())
    try:
        pred_onx = sess.run(
            None, {'X': X_test.astype(numpy.float32)})[0]
    except RuntimeError as e:
        print(str(e))








.. GENERATED FROM PYTHON SOURCE LINES 66-78

Second attempt: variable dimensions
+++++++++++++++++++++++++++++++++++

Unfortunately, even though the conversion
went well, the runtime fails to compute the prediction.
The previous snippet of code imposes fixed dimension
on the input and therefore let the runtime assume
every node output has outputs with fixed dimensions
And that's not the case for this model.
We need to disable these checkings by replacing
the fixed dimensions by an empty value.
(see next line).

.. GENERATED FROM PYTHON SOURCE LINES 78-91

.. code-block:: default


    initial_type = [('X', FloatTensorType([None, None]))]
    onx = convert_sklearn(gpr, initial_types=initial_type,
                          target_opset=12)

    sess = rt.InferenceSession(onx.SerializeToString())
    pred_onx = sess.run(
        None, {'X': X_test.astype(numpy.float32)})[0]

    pred_skl = gpr.predict(X_test)
    print(pred_skl[:10])
    print(pred_onx[0, :10])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [18.22392789 12.36181694 14.44905692 21.06687952 12.26066134 18.12858287
     18.67276881 22.79783243 21.27027007  8.12140694]
    [17.84375]




.. GENERATED FROM PYTHON SOURCE LINES 92-95

The differences seems quite important.
Let's confirm that by looking at the biggest
differences.

.. GENERATED FROM PYTHON SOURCE LINES 95-101

.. code-block:: default


    diff = numpy.sort(numpy.abs(numpy.squeeze(pred_skl) -
                                numpy.squeeze(pred_onx)))[-5:]
    print(diff)
    print('min(Y)-max(Y):', min(y_test), max(y_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [3.50358287 3.68180672 3.72312952 3.72487823 4.08625223]
    min(Y)-max(Y): 5.0 50.0




.. GENERATED FROM PYTHON SOURCE LINES 102-118

Third attempt: use of double
++++++++++++++++++++++++++++

The model uses a couple of matrix computations
and matrices have coefficients with very different
order of magnitude. It is difficult to approximate
the prediction made with scikit-learn if the converted
model sticks to float. Double precision is needed.

The previous code requires two changes. The first
one indicates that inputs are now of type
``DoubleTensorType``. The second change
is the extra parameter ``dtype=numpy.float64``
tells the conversion function that every real
constant matrix such as the trained coefficients
will be dumped as doubles and not as floats anymore.

.. GENERATED FROM PYTHON SOURCE LINES 118-128

.. code-block:: default


    initial_type = [('X', DoubleTensorType([None, None]))]
    onx64 = convert_sklearn(gpr, initial_types=initial_type,
                            target_opset=12)

    sess64 = rt.InferenceSession(onx64.SerializeToString())
    pred_onx64 = sess64.run(None, {'X': X_test})[0]

    print(pred_onx64[0, :10])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [18.22392789]




.. GENERATED FROM PYTHON SOURCE LINES 129-130

The new differences look much better.

.. GENERATED FROM PYTHON SOURCE LINES 130-136

.. code-block:: default


    diff = numpy.sort(numpy.abs(numpy.squeeze(pred_skl) -
                                numpy.squeeze(pred_onx64)))[-5:]
    print(diff)
    print('min(Y)-max(Y):', min(y_test), max(y_test))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.40036924e-08 1.44893963e-08 1.74872739e-08 1.81212982e-08
     1.89644425e-08]
    min(Y)-max(Y): 5.0 50.0




.. GENERATED FROM PYTHON SOURCE LINES 137-143

Size increase
+++++++++++++

As a result, the ONNX model is almost twice bigger
because every coefficient is stored as double and
and not as floats anymore.

.. GENERATED FROM PYTHON SOURCE LINES 143-149

.. code-block:: default


    size32 = len(onx.SerializeToString())
    size64 = len(onx64.SerializeToString())
    print("ONNX with floats:", size32)
    print("ONNX with doubles:", size64)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ONNX with floats: 42813
    ONNX with doubles: 83817




.. GENERATED FROM PYTHON SOURCE LINES 150-161

return_std=True
+++++++++++++++

`GaussianProcessRegressor <https://scikit-learn.org/stable/modules/
generated/sklearn.gaussian_process.GaussianProcessRegressor.html>`_
is one model which defined additional parameter to the predict function.
If call with ``return_std=True``, the class returns one more results
and that needs to be reflected into the generated ONNX graph.
The converter needs to know that an extended graph is required.
That's done through the option mechanism
(see :ref:`l-conv-options`).

.. GENERATED FROM PYTHON SOURCE LINES 161-170

.. code-block:: default


    initial_type = [('X', DoubleTensorType([None, None]))]
    options = {GaussianProcessRegressor: {'return_std': True}}
    try:
        onx64_std = convert_sklearn(gpr, initial_types=initial_type,
                                    options=options, target_opset=12)
    except RuntimeError as e:
        print(e)








.. GENERATED FROM PYTHON SOURCE LINES 171-175

This error highlights the fact that the *scikit-learn*
computes internal variables on first call to method predict.
The converter needs them to be initialized by calling method
predict at least once and then converting again.

.. GENERATED FROM PYTHON SOURCE LINES 175-185

.. code-block:: default


    gpr.predict(X_test[:1], return_std=True)
    onx64_std = convert_sklearn(gpr, initial_types=initial_type,
                                options=options, target_opset=12)

    sess64_std = rt.InferenceSession(onx64_std.SerializeToString())
    pred_onx64_std = sess64_std.run(None, {'X': X_test[:5]})

    pprint.pprint(pred_onx64_std)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[18.22392789],
           [12.36181693],
           [14.44905691],
           [21.06687952],
           [12.26066134]]),
     array([1.04877566, 1.03900854, 0.79804668, 1.10013053, 1.05316807])]




.. GENERATED FROM PYTHON SOURCE LINES 186-187

Let's compare with *scikit-learn* prediction.

.. GENERATED FROM PYTHON SOURCE LINES 187-190

.. code-block:: default


    pprint.pprint(gpr.predict(X_test[:5], return_std=True))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    (array([18.22392789, 12.36181694, 14.44905692, 21.06687952, 12.26066133]),
     array([1.04856997, 1.0386411 , 0.79800592, 1.10010125, 1.05296846]))




.. GENERATED FROM PYTHON SOURCE LINES 191-192

It looks good. Let's do a better checks.

.. GENERATED FROM PYTHON SOURCE LINES 192-202

.. code-block:: default



    pred_onx64_std = sess64_std.run(None, {'X': X_test})
    pred_std = gpr.predict(X_test, return_std=True)


    diff = numpy.sort(numpy.abs(numpy.squeeze(pred_onx64_std[1]) -
                                numpy.squeeze(pred_std[1])))[-5:]
    print(diff)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0.00066575 0.00069997 0.00073584 0.00075069 0.00095638]




.. GENERATED FROM PYTHON SOURCE LINES 203-206

There are some discrepencies but it seems reasonable.

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 206-212

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.1
    scikit-learn: 0.24.2
    onnx:  1.9.0
    onnxruntime:  1.8.1
    skl2onnx:  1.9.2





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.988 seconds)


.. _sphx_glr_download_auto_examples_plot_gpr.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_gpr.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_gpr.py <plot_gpr.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_gpr.ipynb <plot_gpr.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
