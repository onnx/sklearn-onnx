
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_benchmark_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_benchmark_pipeline.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_pipeline.py:


Benchmark a pipeline
====================

The following example checks up on every step in a pipeline,
compares and benchmarks the predictions.

.. contents::
    :local:

Create a pipeline
+++++++++++++++++

We reuse the pipeline implemented in example
`Pipelining: chaining a PCA and a logistic regression
<https://scikit-learn.org/stable/auto_examples/compose/plot_digits_pipe.html>`_.
There is one change because
`ONNX-ML Imputer <https://github.com/onnx/onnx/blob/master/
docs/Operators-ml.md#ai.onnx.ml.Imputer>`_
does not handle string type. This cannot be part of the final ONNX pipeline
and must be removed. Look for comment starting with ``---`` below.

.. GENERATED FROM PYTHON SOURCE LINES 26-54

.. code-block:: default

    import skl2onnx
    import onnx
    import sklearn
    import numpy
    from skl2onnx.helpers import collect_intermediate_steps
    from timeit import timeit
    from skl2onnx.helpers import compare_objects
    import onnxruntime as rt
    from onnxconverter_common.data_types import FloatTensorType
    from skl2onnx import convert_sklearn
    import numpy as np
    import pandas as pd

    from sklearn import datasets
    from sklearn.decomposition import PCA
    from sklearn.linear_model import LogisticRegression
    from sklearn.pipeline import Pipeline

    logistic = LogisticRegression()
    pca = PCA()
    pipe = Pipeline(steps=[('pca', pca), ('logistic', logistic)])

    digits = datasets.load_digits()
    X_digits = digits.data[:1000]
    y_digits = digits.target[:1000]

    pipe.fit(X_digits, y_digits)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Python395_x64\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
    STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

    Increase the number of iterations (max_iter) or scale the data as shown in:
        https://scikit-learn.org/stable/modules/preprocessing.html
    Please also refer to the documentation for alternative solver options:
        https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
      n_iter_i = _check_optimize_result(

    Pipeline(steps=[('pca', PCA()), ('logistic', LogisticRegression())])



.. GENERATED FROM PYTHON SOURCE LINES 55-57

Conversion to ONNX
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 57-71

.. code-block:: default



    initial_types = [('input', FloatTensorType((None, X_digits.shape[1])))]
    model_onnx = convert_sklearn(pipe, initial_types=initial_types,
                                 target_opset=12)

    sess = rt.InferenceSession(model_onnx.SerializeToString())
    print("skl predict_proba")
    print(pipe.predict_proba(X_digits[:2]))
    onx_pred = sess.run(None, {'input': X_digits[:2].astype(np.float32)})[1]
    df = pd.DataFrame(onx_pred)
    print("onnx predict_proba")
    print(df.values)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    skl predict_proba
    [[9.99998536e-01 5.99064418e-19 3.48549633e-10 1.55766000e-08
      3.32560298e-10 1.21314888e-06 3.98960552e-08 1.22514022e-07
      2.23871322e-08 4.98148901e-08]
     [1.47648638e-14 9.99999301e-01 1.05811976e-10 7.49298741e-13
      2.48627549e-07 8.75685886e-12 5.39025264e-11 2.95900020e-11
      4.50529386e-07 1.30607665e-13]]
    onnx predict_proba
    [[9.99998569e-01 5.99060226e-19 3.48550355e-10 1.55766493e-08
      3.32562450e-10 1.21315134e-06 3.98961930e-08 1.22514706e-07
      2.23872068e-08 4.98151529e-08]
     [1.47648397e-14 9.99999285e-01 1.05811387e-10 7.49294615e-13
      2.48626947e-07 8.75680518e-12 5.39022368e-11 2.95898375e-11
      4.50527352e-07 1.30607100e-13]]




.. GENERATED FROM PYTHON SOURCE LINES 72-74

Comparing outputs
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default


    compare_objects(pipe.predict_proba(X_digits[:2]), onx_pred)
    # No exception so they are the same.








.. GENERATED FROM PYTHON SOURCE LINES 79-81

Benchmarks
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 81-89

.. code-block:: default


    print("scikit-learn")
    print(timeit("pipe.predict_proba(X_digits[:1])",
                 number=10000, globals=globals()))
    print("onnxruntime")
    print(timeit("sess.run(None, {'input': X_digits[:1].astype(np.float32)})[1]",
                 number=10000, globals=globals()))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scikit-learn
    3.8442746000000056
    onnxruntime
    0.8979321999999996




.. GENERATED FROM PYTHON SOURCE LINES 90-98

Intermediate steps
++++++++++++++++++

Let's imagine the final output is wrong and we need
to look into each component of the pipeline which one
is failing. The following method modifies the scikit-learn
pipeline to steal the intermediate outputs and produces
an smaller ONNX graph for every operator.

.. GENERATED FROM PYTHON SOURCE LINES 98-128

.. code-block:: default



    steps = collect_intermediate_steps(
        pipe, "pipeline", initial_types)

    assert len(steps) == 2

    pipe.predict_proba(X_digits[:2])

    for i, step in enumerate(steps):
        onnx_step = step['onnx_step']
        sess = rt.InferenceSession(onnx_step.SerializeToString())
        onnx_outputs = sess.run(None, {'input': X_digits[:2].astype(np.float32)})
        skl_outputs = step['model']._debug.outputs
        if 'transform' in skl_outputs:
            compare_objects(skl_outputs['transform'], onnx_outputs[0])
            print("benchmark", step['model'].__class__)
            print("scikit-learn")
            print(timeit("step['model'].transform(X_digits[:1])",
                         number=10000, globals=globals()))
        else:
            compare_objects(skl_outputs['predict_proba'], onnx_outputs[1])
            print("benchmark", step['model'].__class__)
            print("scikit-learn")
            print(timeit("step['model'].predict_proba(X_digits[:1])",
                         number=10000, globals=globals()))
        print("onnxruntime")
        print(timeit("sess.run(None, {'input': X_digits[:1].astype(np.float32)})",
                     number=10000, globals=globals()))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    benchmark <class 'sklearn.decomposition._pca.PCA'>
    scikit-learn
    1.4557757999999978
    onnxruntime
    0.4905435999999952
    benchmark <class 'sklearn.linear_model._logistic.LogisticRegression'>
    scikit-learn
    2.587701999999993
    onnxruntime
    0.6812314999999955




.. GENERATED FROM PYTHON SOURCE LINES 129-130

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 130-136

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.1
    scikit-learn: 0.24.2
    onnx:  1.9.0
    onnxruntime:  1.8.1
    skl2onnx:  1.9.2





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.205 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_benchmark_pipeline.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_benchmark_pipeline.py <plot_benchmark_pipeline.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_benchmark_pipeline.ipynb <plot_benchmark_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
