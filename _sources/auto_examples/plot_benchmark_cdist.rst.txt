
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_benchmark_cdist.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_benchmark_cdist.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_benchmark_cdist.py:


.. _l-benchmark-cdist:

Compare CDist with scipy
========================

The following example focuses on one particular operator,
CDist and compares its execution time between
*onnxruntime* and *scipy*.

.. contents::
    :local:

ONNX Graph with CDist
+++++++++++++++++++++

`cdist <https://docs.scipy.org/doc/scipy/reference/
generated/scipy.spatial.distance.cdist.html>`_
function computes pairwise distances.

.. GENERATED FROM PYTHON SOURCE LINES 24-42

.. code-block:: default

    from pprint import pprint
    from timeit import Timer
    import numpy as np
    from scipy.spatial.distance import cdist
    from tqdm import tqdm
    from pandas import DataFrame
    import onnx
    import onnxruntime as rt
    from onnxruntime import InferenceSession
    import skl2onnx
    from skl2onnx.algebra.custom_ops import OnnxCDist
    from skl2onnx.common.data_types import FloatTensorType

    X = np.ones((2, 4), dtype=np.float32)
    Y = np.ones((3, 4), dtype=np.float32)
    Y *= 2
    print(cdist(X, Y, metric='euclidean'))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[2. 2. 2.]
     [2. 2. 2.]]




.. GENERATED FROM PYTHON SOURCE LINES 43-44

ONNX

.. GENERATED FROM PYTHON SOURCE LINES 44-52

.. code-block:: default


    op = OnnxCDist('X', 'Y', op_version=12, output_names=['Z'],
                   metric='euclidean')
    onx = op.to_onnx({'X': X, 'Y': Y},
                     outputs=[('Z', FloatTensorType())])
    print(onx)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ir_version: 7
    producer_name: "skl2onnx"
    producer_version: "1.9.2"
    domain: "ai.onnx"
    model_version: 0
    graph {
      node {
        input: "X"
        input: "Y"
        output: "Z"
        name: "CD_CDist"
        op_type: "CDist"
        attribute {
          name: "metric"
          s: "euclidean"
          type: STRING
        }
        domain: "com.microsoft"
      }
      name: "OnnxCDist"
      input {
        name: "X"
        type {
          tensor_type {
            elem_type: 1
            shape {
              dim {
              }
              dim {
                dim_value: 4
              }
            }
          }
        }
      }
      input {
        name: "Y"
        type {
          tensor_type {
            elem_type: 1
            shape {
              dim {
              }
              dim {
                dim_value: 4
              }
            }
          }
        }
      }
      output {
        name: "Z"
        type {
          tensor_type {
            elem_type: 1
          }
        }
      }
    }
    opset_import {
      domain: "com.microsoft"
      version: 1
    }





.. GENERATED FROM PYTHON SOURCE LINES 53-58

CDist and onnxruntime
+++++++++++++++++++++

We compute the output of CDist operator
with onnxruntime.

.. GENERATED FROM PYTHON SOURCE LINES 58-63

.. code-block:: default


    sess = InferenceSession(onx.SerializeToString())
    res = sess.run(None, {'X': X, 'Y': Y})
    print(res)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[1.9999999, 1.9999999, 1.9999999],
           [1.9999999, 2.       , 2.       ]], dtype=float32)]




.. GENERATED FROM PYTHON SOURCE LINES 64-68

Benchmark
+++++++++

Let's compare onnxruntime and scipy.

.. GENERATED FROM PYTHON SOURCE LINES 68-85

.. code-block:: default



    def measure_time(name, stmt, context, repeat=100, number=20):
        tim = Timer(stmt, globals=context)
        res = np.array(
            tim.repeat(repeat=repeat, number=number))
        res /= number
        mean = np.mean(res)
        dev = np.mean(res ** 2)
        dev = (dev - mean**2) ** 0.5
        return dict(
            average=mean, deviation=dev, min_exec=np.min(res),
            max_exec=np.max(res), repeat=repeat, number=number,
            nrows=context['X'].shape[0], ncols=context['Y'].shape[1],
            name=name)









.. GENERATED FROM PYTHON SOURCE LINES 86-87

scipy

.. GENERATED FROM PYTHON SOURCE LINES 87-94

.. code-block:: default


    time_scipy = measure_time(
        "scipy", "cdist(X, Y)",
        context={'cdist': cdist, 'X': X, 'Y': Y})
    pprint(time_scipy)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'average': 2.733374999999682e-05,
     'deviation': 1.2159099110871633e-05,
     'max_exec': 6.450499999992587e-05,
     'min_exec': 1.9710000000117134e-05,
     'name': 'scipy',
     'ncols': 4,
     'nrows': 2,
     'number': 20,
     'repeat': 100}




.. GENERATED FROM PYTHON SOURCE LINES 95-96

onnxruntime

.. GENERATED FROM PYTHON SOURCE LINES 96-102

.. code-block:: default


    time_ort = measure_time(
        "ort", "sess.run(None, {'X': X, 'Y': Y})",
        context={'sess': sess, 'X': X, 'Y': Y})
    pprint(time_ort)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'average': 4.651885000001244e-05,
     'deviation': 1.2024672362576826e-05,
     'max_exec': 0.0001053100000000029,
     'min_exec': 3.488500000017325e-05,
     'name': 'ort',
     'ncols': 4,
     'nrows': 2,
     'number': 20,
     'repeat': 100}




.. GENERATED FROM PYTHON SOURCE LINES 103-104

Longer benchmark

.. GENERATED FROM PYTHON SOURCE LINES 104-128

.. code-block:: default


    metrics = []
    for dim in tqdm([10, 100, 1000, 10000]):
        # We cannot change the number of column otherwise
        # we need to create a new graph.
        X = np.random.randn(dim, 4).astype(np.float32)
        Y = np.random.randn(10, 4).astype(np.float32)

        time_scipy = measure_time(
            "scipy", "cdist(X, Y)",
            context={'cdist': cdist, 'X': X, 'Y': Y})
        time_ort = measure_time(
            "ort", "sess.run(None, {'X': X, 'Y': Y})",
            context={'sess': sess, 'X': X, 'Y': Y})
        metric = dict(N=dim, scipy=time_scipy['average'],
                      ort=time_ort['average'])
        metrics.append(metric)

    df = DataFrame(metrics)
    df['scipy/ort'] = df['scipy'] / df['ort']
    print(df)

    df.plot(x='N', y=['scipy/ort'])




.. image:: /auto_examples/images/sphx_glr_plot_benchmark_cdist_001.png
    :alt: plot benchmark cdist
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|                                                                                            | 0/4 [00:00<?, ?it/s]     25%|#####################                                                               | 1/4 [00:00<00:00,  4.26it/s]     50%|##########################################                                          | 2/4 [00:00<00:00,  4.82it/s]     75%|###############################################################                     | 3/4 [00:00<00:00,  2.80it/s]    100%|####################################################################################| 4/4 [00:05<00:00,  1.82s/it]    100%|####################################################################################| 4/4 [00:05<00:00,  1.25s/it]
           N     scipy       ort  scipy/ort
    0     10  0.000027  0.000088   0.310865
    1    100  0.000053  0.000035   1.520588
    2   1000  0.000200  0.000065   3.048115
    3  10000  0.001651  0.000372   4.439147




.. GENERATED FROM PYTHON SOURCE LINES 129-130

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 130-135

.. code-block:: default


    print("numpy:", np.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.1
    onnx:  1.9.0
    onnxruntime:  1.8.1
    skl2onnx:  1.9.2





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.277 seconds)


.. _sphx_glr_download_auto_examples_plot_benchmark_cdist.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_benchmark_cdist.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_benchmark_cdist.py <plot_benchmark_cdist.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_benchmark_cdist.ipynb <plot_benchmark_cdist.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
