
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_pipeline_lightgbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_pipeline_lightgbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_pipeline_lightgbm.py:


.. _example-lightgbm:

Convert a pipeline with a LightGbm model
========================================

.. index:: LightGbm

*sklearn-onnx* only converts *scikit-learn* models into *ONNX*
but many libraries implement *scikit-learn* API so that their models
can be included in a *scikit-learn* pipeline. This example considers
a pipeline including a *LightGbm* model. *sklearn-onnx* can convert
the whole pipeline as long as it knows the converter associated to
a *LGBMClassifier*. Let's see how to do it.

A couple of errors might happen while trying to convert
your own pipeline, some of them are described
and explained in :ref:`errors-pipeline`.

.. contents::
    :local:

Train a LightGBM classifier
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 29-63

.. code-block:: default

    import lightgbm
    import onnxmltools
    import skl2onnx
    import onnx
    import sklearn
    import matplotlib.pyplot as plt
    import os
    from onnx.tools.net_drawer import GetPydotGraph, GetOpNodeProducer
    import onnxruntime as rt
    from onnxruntime.capi.onnxruntime_pybind11_state import Fail as OrtFail
    from skl2onnx import convert_sklearn, update_registered_converter
    from skl2onnx.common.shape_calculator import calculate_linear_classifier_output_shapes  # noqa
    from onnxmltools.convert.lightgbm.operator_converters.LightGbm import convert_lightgbm  # noqa
    import onnxmltools.convert.common.data_types
    from skl2onnx.common.data_types import FloatTensorType
    import numpy
    from sklearn.datasets import load_iris
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from lightgbm import LGBMClassifier

    data = load_iris()
    X = data.data[:, :2]
    y = data.target

    ind = numpy.arange(X.shape[0])
    numpy.random.shuffle(ind)
    X = X[ind, :].copy()
    y = y[ind].copy()

    pipe = Pipeline([('scaler', StandardScaler()),
                     ('lgbm', LGBMClassifier(n_estimators=3))])
    pipe.fit(X, y)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Pipeline(steps=[('scaler', StandardScaler()),
                    ('lgbm', LGBMClassifier(n_estimators=3))])



.. GENERATED FROM PYTHON SOURCE LINES 64-75

Register the converter for LGBMClassifier
+++++++++++++++++++++++++++++++++++++++++

The converter is implemented in *onnxmltools*:
`onnxmltools...LightGbm.py
<https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/
lightgbm/operator_converters/LightGbm.py>`_.
and the shape calculator:
`onnxmltools...Classifier.py
<https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/
lightgbm/shape_calculators/Classifier.py>`_.

.. GENERATED FROM PYTHON SOURCE LINES 77-78

Then we import the converter and shape calculator.

.. GENERATED FROM PYTHON SOURCE LINES 80-81

Let's register the new converter.

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: default

    update_registered_converter(
        LGBMClassifier, 'LightGbmLGBMClassifier',
        calculate_linear_classifier_output_shapes, convert_lightgbm,
        options={'nocl': [True, False], 'zipmap': [True, False, 'columns']})








.. GENERATED FROM PYTHON SOURCE LINES 87-89

Convert again
+++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 89-99

.. code-block:: default


    model_onnx = convert_sklearn(
        pipe, 'pipeline_lightgbm',
        [('input', FloatTensorType([None, 2]))],
        target_opset=12)

    # And save.
    with open("pipeline_lightgbm.onnx", "wb") as f:
        f.write(model_onnx.SerializeToString())








.. GENERATED FROM PYTHON SOURCE LINES 100-104

Compare the predictions
+++++++++++++++++++++++

Predictions with LightGbm.

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default


    print("predict", pipe.predict(X[:5]))
    print("predict_proba", pipe.predict_proba(X[:1]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    predict [2 0 1 2 0]
    predict_proba [[0.24494482 0.33989718 0.415158  ]]




.. GENERATED FROM PYTHON SOURCE LINES 109-110

Predictions with onnxruntime.

.. GENERATED FROM PYTHON SOURCE LINES 110-123

.. code-block:: default


    try:
        sess = rt.InferenceSession("pipeline_lightgbm.onnx")
    except OrtFail as e:
        print(e)
        print("The converter requires onnxmltools>=1.7.0")
        sess = None

    if sess is not None:
        pred_onx = sess.run(None, {"input": X[:5].astype(numpy.float32)})
        print("predict", pred_onx[0])
        print("predict_proba", pred_onx[1][:1])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    predict [2 0 1 2 0]
    predict_proba [{0: 0.24494479596614838, 1: 0.33989718556404114, 2: 0.4151580035686493}]




.. GENERATED FROM PYTHON SOURCE LINES 124-126

Display the ONNX graph
++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 126-141

.. code-block:: default


    pydot_graph = GetPydotGraph(
        model_onnx.graph, name=model_onnx.graph.name, rankdir="TB",
        node_producer=GetOpNodeProducer(
            "docstring", color="yellow",
            fillcolor="yellow", style="filled"))
    pydot_graph.write_dot("pipeline.dot")

    os.system('dot -O -Gdpi=300 -Tpng pipeline.dot')

    image = plt.imread("pipeline.dot.png")
    fig, ax = plt.subplots(figsize=(40, 20))
    ax.imshow(image)
    ax.axis('off')




.. image:: /auto_examples/images/sphx_glr_plot_pipeline_lightgbm_001.png
    :alt: plot pipeline lightgbm
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (-0.5, 2108.5, 2558.5, -0.5)



.. GENERATED FROM PYTHON SOURCE LINES 142-143

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 143-151

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)
    print("onnxmltools: ", onnxmltools.__version__)
    print("lightgbm: ", lightgbm.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.1
    scikit-learn: 0.24.2
    onnx:  1.9.0
    onnxruntime:  1.8.1
    skl2onnx:  1.9.2
    onnxmltools:  1.8.0
    lightgbm:  3.2.1





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.981 seconds)


.. _sphx_glr_download_auto_examples_plot_pipeline_lightgbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_pipeline_lightgbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_lightgbm.py <plot_pipeline_lightgbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_lightgbm.ipynb <plot_pipeline_lightgbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
