
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_output_onnx_single_probability.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_output_onnx_single_probability.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_output_onnx_single_probability.py:


Append onnx nodes to the converted model
========================================

This example show how to append some onnx nodes to the converted
model to produce the desired output. In this case, it removes the second
column of the output probabilies.

To be completly accurate, most of the code was generated using a LLM
and modified to accomodate with the latest changes.

.. GENERATED FROM PYTHON SOURCE LINES 12-27

.. code-block:: Python


    from sklearn.datasets import load_iris
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split
    from skl2onnx import convert_sklearn
    from skl2onnx.common.data_types import FloatTensorType
    import onnx

    iris = load_iris()
    X, y = iris.data, iris.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    clr = LogisticRegression(max_iter=500)
    clr.fit(X_train, y_train)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: #000;
      --sklearn-color-text-muted: #666;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-1 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-1 pre {
      padding: 0;
    }

    #sk-container-id-1 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-1 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-1 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-1 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-1 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-1 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-1 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-1 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-1 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-1 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-1 label.sk-toggleable__label {
      cursor: pointer;
      display: flex;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
      align-items: start;
      justify-content: space-between;
      gap: 0.5em;
    }

    #sk-container-id-1 label.sk-toggleable__label .caption {
      font-size: 0.6rem;
      font-weight: lighter;
      color: var(--sklearn-color-text-muted);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-1 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-1 div.sk-label label.sk-toggleable__label,
    #sk-container-id-1 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-1 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-1 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-1 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-1 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 0.5em;
      text-align: center;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-1 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-1 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LogisticRegression(max_iter=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>LogisticRegression</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html">?<span>Documentation for LogisticRegression</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>LogisticRegression(max_iter=500)</pre></div> </div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 28-29

model_to_convert refers to the scikit-learn classifier to convert.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: Python

    model_to_convert = clr  # model to convert
    X_test = X_test[:1]  # data used to test or train, one row is enough








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Set the output filename for the modified ONNX model

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: Python

    output_filename = "output_file.onnx"  # Replace with your desired output filename








.. GENERATED FROM PYTHON SOURCE LINES 37-48

Step 1: Convert the model to ONNX format,
disabling the output of labels.
Define the input type for the ONNX model.
The input type is a float tensor with shape
[None, X_test.shape[1]], where None indicates that the
number of input samples can be flexible,
and X_test.shape[1] is the number of features for each input sample.
A "tensor" is essentially a multi-dimensional array,
commonly used in machine learning to represent data.
A "float tensor" specifically contains floating-point
numbers, which are numbers with decimals.

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: Python

    initial_type = [("float_input", FloatTensorType([None, X_test.shape[1]]))]








.. GENERATED FROM PYTHON SOURCE LINES 51-62

Convert the model to ONNX format.
- target_opset=18 specifies the version of ONNX operators to use.
- options={...} sets parameters for the conversion:
  - "zipmap": False ensures that the output is a raw array
  - of probabilities instead of a dictionary.
  - "output_class_labels": False ensures that the output
    contains only probabilities, not class labels.
ONNX (Open Neural Network Exchange) is an open format for
representing machine learning models.
It allows interoperability between different machine learning frameworks,
enabling the use of models across various platforms.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. code-block:: Python

    onx = convert_sklearn(
        model_to_convert,
        initial_types=initial_type,
        target_opset={"": 18, "ai.onnx.ml": 3},
        options={
            id(model_to_convert): {"zipmap": False, "output_class_labels": False}
        },  # Ensures the output is only probabilities, not labels
    )








.. GENERATED FROM PYTHON SOURCE LINES 72-76

Step 2: Load the ONNX model for further modifications if needed
Load the ONNX model from the serialized string representation.
An ONNX file is essentially a serialized representation of a machine learning
model that can be shared and used across different systems.

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: Python

    onnx_model = onnx.load_model_from_string(onx.SerializeToString())








.. GENERATED FROM PYTHON SOURCE LINES 79-82

Assuming the first output in this model should be the probability tensor
Extract the name of the output tensor representing the probabilities.
If there are multiple outputs, select the second one, otherwise, select the first.

.. GENERATED FROM PYTHON SOURCE LINES 82-88

.. code-block:: Python

    prob_output_name = (
        onnx_model.graph.output[1].name
        if len(onnx_model.graph.output) > 1
        else onnx_model.graph.output[0].name
    )








.. GENERATED FROM PYTHON SOURCE LINES 89-93

Add a Gather node to extract only the probability
of the positive class (index 1)
Create a tensor to specify the index to gather
(index 1), which represents the positive class.

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: Python

    indices = onnx.helper.make_tensor(
        "indices", onnx.TensorProto.INT64, (1,), [1]
    )  # Index 1 to gather positive class








.. GENERATED FROM PYTHON SOURCE LINES 98-105

Create a "Gather" node in the ONNX graph to extract the probability of the positive class.
- inputs: [prob_output_name, "indices"] specify the inputs
  to this node (probability tensor and index tensor).
- outputs: ["positive_class_prob"] specify the name of the output of this node.
- axis=1 indicates gathering along the columns (features) of the probability tensor.
A "Gather" node is used to extract specific elements from a tensor.
Here, it extracts the probability for the positive class.

.. GENERATED FROM PYTHON SOURCE LINES 105-112

.. code-block:: Python

    gather_node = onnx.helper.make_node(
        "Gather",
        inputs=[prob_output_name, "indices"],
        outputs=["positive_class_prob"],
        axis=1,  # Gather along columns (axis 1)
    )








.. GENERATED FROM PYTHON SOURCE LINES 113-114

Add the Gather node to the ONNX graph

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: Python

    onnx_model.graph.node.append(gather_node)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    input: "probabilities"
    input: "indices"
    output: "positive_class_prob"
    op_type: "Gather"
    attribute {
      name: "axis"
      i: 1
      type: INT
    }




.. GENERATED FROM PYTHON SOURCE LINES 117-119

Add the tensor initializer for indices (needed for the Gather node)
Initializers in ONNX are used to define constant tensors that are used in the computation.

.. GENERATED FROM PYTHON SOURCE LINES 119-121

.. code-block:: Python

    onnx_model.graph.initializer.append(indices)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    dims: 1
    data_type: 7
    int64_data: 1
    name: "indices"




.. GENERATED FROM PYTHON SOURCE LINES 122-124

Remove existing outputs and add only the new output for the positive class probability
Clear the existing output definitions to replace them with the new output.

.. GENERATED FROM PYTHON SOURCE LINES 124-126

.. code-block:: Python

    del onnx_model.graph.output[:]








.. GENERATED FROM PYTHON SOURCE LINES 127-129

Define new output for the positive class probability
Create a new output tensor specification with the name "positive_class_prob".

.. GENERATED FROM PYTHON SOURCE LINES 129-134

.. code-block:: Python

    positive_class_output = onnx.helper.make_tensor_value_info(
        "positive_class_prob", onnx.TensorProto.FLOAT, [None, 1]
    )
    onnx_model.graph.output.append(positive_class_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    name: "positive_class_prob"
    type {
      tensor_type {
        elem_type: 1
        shape {
          dim {
          }
          dim {
            dim_value: 1
          }
        }
      }
    }




.. GENERATED FROM PYTHON SOURCE LINES 135-139

Step 3: Save the modified ONNX model
Save the modified ONNX model to the specified output filename.
The resulting ONNX file can then be loaded and used in different environments
that support ONNX, such as inference servers or other machine learning frameworks.

.. GENERATED FROM PYTHON SOURCE LINES 139-142

.. code-block:: Python

    onnx.save(onnx_model, output_filename)









.. GENERATED FROM PYTHON SOURCE LINES 143-144

The model can be printed as follows.

.. GENERATED FROM PYTHON SOURCE LINES 144-145

.. code-block:: Python

    print(onnx.printer.to_text(onnx_model))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <
       ir_version: 8,
       opset_import: ["ai.onnx.ml" : 1, "" : 18, "" : 18],
       producer_name: "skl2onnx",
       producer_version: "1.19.1",
       domain: "ai.onnx",
       model_version: 0,
       doc_string: ""
    >
    "05f01d3ce40e4d9d969b78b0be9e706d" (float[?,4] float_input) => (float[?,1] positive_class_prob) 
       <int64[1] indices =  {1}>
    {
       [LinearClassifier] label, probability_tensor = ai.onnx.ml.LinearClassifier <classlabels_ints: ints = [0, 1, 2], coefficients: floats = [-0.426998, 0.909799, -2.30715, -1.00512, 0.559776, -0.434449, -0.268645, -0.704307, -0.132778, -0.47535, 2.5758, 1.70943], intercepts: floats = [9.22076, 2.16403, -11.3848], multi_class: int = 1, post_transform: string = "SOFTMAX"> (float_input)
       [Normalizer] probabilities = ai.onnx.ml.Normalizer <norm: string = "L1"> (probability_tensor)
       positive_class_prob = Gather <axis: int = 1> (probabilities, indices)
    }





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.059 seconds)


.. _sphx_glr_download_auto_examples_plot_output_onnx_single_probability.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_output_onnx_single_probability.ipynb <plot_output_onnx_single_probability.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_output_onnx_single_probability.py <plot_output_onnx_single_probability.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_output_onnx_single_probability.zip <plot_output_onnx_single_probability.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
