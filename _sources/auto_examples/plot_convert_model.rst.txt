
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_convert_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_convert_model.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_convert_model.py:


.. _l-rf-iris-example:

Train, convert and predict a model
==================================

Train and deploy a model usually involves the
three following steps:

* train a pipeline with *scikit-learn*,
* convert it into *ONNX* with *sklearn-onnx*,
* predict with *onnxruntime*.

.. contents::
    :local:

Train a model
+++++++++++++

A very basic example using random forest and
the iris dataset.

.. GENERATED FROM PYTHON SOURCE LINES 26-45

.. code-block:: default


    import skl2onnx
    import onnx
    import sklearn
    from sklearn.linear_model import LogisticRegression
    import numpy
    import onnxruntime as rt
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx import convert_sklearn
    from sklearn.datasets import load_iris
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    iris = load_iris()
    X, y = iris.data, iris.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)
    clr = RandomForestClassifier()
    clr.fit(X_train, y_train)
    print(clr)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    RandomForestClassifier()




.. GENERATED FROM PYTHON SOURCE LINES 46-48

Convert a model into ONNX
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 48-56

.. code-block:: default


    initial_type = [('float_input', FloatTensorType([None, 4]))]
    onx = convert_sklearn(clr, initial_types=initial_type,
                          target_opset=12)

    with open("rf_iris.onnx", "wb") as f:
        f.write(onx.SerializeToString())








.. GENERATED FROM PYTHON SOURCE LINES 57-59

Compute the prediction with ONNX Runtime
++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default

    sess = rt.InferenceSession("rf_iris.onnx")
    input_name = sess.get_inputs()[0].name
    label_name = sess.get_outputs()[0].name
    pred_onx = sess.run(
        [label_name], {input_name: X_test.astype(numpy.float32)})[0]
    print(pred_onx)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 2 2 0 1 2 0 2 2 0 1 1 1 0 2 0 1 2 0 1 2 1 0 1 1 0 0 1 1 0 0 0 1 0 0 0 0
     2]




.. GENERATED FROM PYTHON SOURCE LINES 67-68

Full example with a logistic regression

.. GENERATED FROM PYTHON SOURCE LINES 68-85

.. code-block:: default


    clr = LogisticRegression()
    clr.fit(X_train, y_train)
    initial_type = [('float_input', FloatTensorType([None, X_train.shape[1]]))]
    onx = convert_sklearn(clr, initial_types=initial_type,
                          target_opset=12)
    with open("logreg_iris.onnx", "wb") as f:
        f.write(onx.SerializeToString())

    sess = rt.InferenceSession("logreg_iris.onnx")
    input_name = sess.get_inputs()[0].name
    label_name = sess.get_outputs()[0].name
    pred_onx = sess.run([label_name],
                        {input_name: X_test.astype(numpy.float32)})[0]
    print(pred_onx)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Python395_x64\lib\site-packages\sklearn\linear_model\_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1):
    STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

    Increase the number of iterations (max_iter) or scale the data as shown in:
        https://scikit-learn.org/stable/modules/preprocessing.html
    Please also refer to the documentation for alternative solver options:
        https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
      n_iter_i = _check_optimize_result(
    [0 2 2 0 1 2 0 2 2 0 1 1 1 0 2 0 1 2 0 1 2 2 0 1 1 0 0 1 2 0 0 0 1 0 0 0 0
     2]




.. GENERATED FROM PYTHON SOURCE LINES 86-87

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.0
    scikit-learn: 0.24.2
    onnx:  1.9.0
    onnxruntime:  1.8.0
    skl2onnx:  1.9.1.dev





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.598 seconds)


.. _sphx_glr_download_auto_examples_plot_convert_model.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_convert_model.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_convert_model.py <plot_convert_model.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_convert_model.ipynb <plot_convert_model.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
