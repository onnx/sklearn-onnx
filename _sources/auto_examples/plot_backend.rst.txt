
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_backend.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_backend.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_backend.py:


.. _l-example-backend-api:

ONNX Runtime Backend for ONNX
=============================

.. index:: backend

*ONNX Runtime* extends the
`onnx backend API <https://github.com/onnx/onnx/blob/master/docs/
ImplementingAnOnnxBackend.md>`_
to run predictions using this runtime.
Let's use the API to compute the prediction
of a simple logistic regression model.

.. GENERATED FROM PYTHON SOURCE LINES 20-34

.. code-block:: default

    import skl2onnx
    import onnxruntime
    import onnx
    import sklearn
    from sklearn.datasets import load_iris
    from sklearn.linear_model import LogisticRegression
    import numpy
    from onnxruntime import get_device
    import numpy as np
    from onnxruntime import datasets
    import onnxruntime.backend as backend
    from onnx import load









.. GENERATED FROM PYTHON SOURCE LINES 35-36

Let's create an ONNX graph first.

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: default


    data = load_iris()
    X, Y = data.data, data.target
    logreg = LogisticRegression(C=1e5).fit(X, Y)
    model = skl2onnx.to_onnx(logreg, X.astype(np.float32))
    name = "logreg_iris.onnx"
    with open(name, "wb") as f:
        f.write(model.SerializeToString())








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Let's use ONNX backend API to test it.

.. GENERATED FROM PYTHON SOURCE LINES 47-58

.. code-block:: default


    model = onnx.load(name)
    rep = backend.prepare(model, 'CPU')
    x = np.array([[-1.0, -2.0, 5.0, 6.0],
                  [-1.0, -2.0, -3.0, -4.0],
                  [-1.0, -2.0, 7.0, 8.0]],
                 dtype=np.float32)
    label, proba = rep.run(x)
    print("label={}".format(label))
    print("probabilities={}".format(proba))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    label=[2 1 2]
    probabilities=[{0: 0.0, 1: 0.0, 2: 1.0}, {0: 0.0458628311753273, 1: 0.9541371464729309, 2: 0.0}, {0: 0.0, 1: 0.0, 2: 1.0}]




.. GENERATED FROM PYTHON SOURCE LINES 59-61

The device depends on how the package was compiled,
GPU or CPU.

.. GENERATED FROM PYTHON SOURCE LINES 61-63

.. code-block:: default

    print(get_device())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    CPU




.. GENERATED FROM PYTHON SOURCE LINES 64-66

The backend can also directly load the model
without using *onnx*.

.. GENERATED FROM PYTHON SOURCE LINES 66-76

.. code-block:: default


    rep = backend.prepare(name, 'CPU')
    x = np.array([[-1.0, -2.0, -3.0, -4.0],
                  [-1.0, -2.0, -3.0, -4.0],
                  [-1.0, -2.0, -3.0, -4.0]],
                 dtype=np.float32)
    label, proba = rep.run(x)
    print("label={}".format(label))
    print("probabilities={}".format(proba))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    label=[1 1 1]
    probabilities=[{0: 0.0458628311753273, 1: 0.9541371464729309, 2: 0.0}, {0: 0.0458628311753273, 1: 0.9541371464729309, 2: 0.0}, {0: 0.0458628311753273, 1: 0.9541371464729309, 2: 0.0}]




.. GENERATED FROM PYTHON SOURCE LINES 77-80

The backend API is implemented by other frameworks
and makes it easier to switch between multiple runtimes
with the same API.

.. GENERATED FROM PYTHON SOURCE LINES 82-83

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 83-89

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", onnxruntime.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.21.1
    scikit-learn: 0.24.2
    onnx:  1.9.0
    onnxruntime:  1.8.1
    skl2onnx:  1.9.2





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_auto_examples_plot_backend.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/sklearn-onnx/master?filepath=notebooks/auto_examples/plot_backend.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_backend.py <plot_backend.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_backend.ipynb <plot_backend.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
