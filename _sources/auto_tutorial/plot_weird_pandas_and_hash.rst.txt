
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial/plot_weird_pandas_and_hash.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorial_plot_weird_pandas_and_hash.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_weird_pandas_and_hash.py:


FeatureHasher, pandas values and unexpected discrepancies
=========================================================

A game of finding it goes wrong and there are multiple places.


Initial example
+++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 13-71

.. code-block:: Python


    import logging
    import numpy as np
    from pandas import DataFrame
    from onnxruntime import InferenceSession, SessionOptions
    from onnxruntime_extensions import get_library_path
    from sklearn.feature_extraction import FeatureHasher
    from sklearn.compose import ColumnTransformer
    from sklearn.pipeline import Pipeline
    from sklearn.ensemble import GradientBoostingClassifier
    from skl2onnx import to_onnx
    from skl2onnx.common.data_types import StringTensorType

    log = logging.getLogger("skl2onnx")
    log.setLevel(logging.ERROR)


    df = DataFrame(
        {
            "Cat1": ["a", "b", "d", "abd", "e", "z", "ez"],
            "Cat2": ["A", "B", "D", "ABD", "e", "z", "ez"],
            "Label": [1, 1, 0, 0, 1, 0, 0],
        }
    )

    cat_features = [c for c in df.columns if "Cat" in c]
    X_train = df[cat_features]

    X_train["cat_features"] = df[cat_features].values.tolist()
    X_train = X_train.drop(cat_features, axis=1)
    y_train = df["Label"]

    pipe = Pipeline(
        steps=[
            (
                "preprocessor",
                ColumnTransformer(
                    [
                        (
                            "cat_preprocessor",
                            FeatureHasher(
                                n_features=8,
                                input_type="string",
                                alternate_sign=False,
                                dtype=np.float32,
                            ),
                            "cat_features",
                        )
                    ],
                    sparse_threshold=0.0,
                ),
            ),
            ("classifier", GradientBoostingClassifier(n_estimators=2, max_depth=2)),
        ],
    )
    pipe.fit(X_train, y_train)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-22 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: #000;
      --sklearn-color-text-muted: #666;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-22 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-22 pre {
      padding: 0;
    }

    #sk-container-id-22 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-22 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-22 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-22 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-22 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-22 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-22 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-22 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-22 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-22 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-22 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-22 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-22 label.sk-toggleable__label {
      cursor: pointer;
      display: flex;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
      align-items: start;
      justify-content: space-between;
      gap: 0.5em;
    }

    #sk-container-id-22 label.sk-toggleable__label .caption {
      font-size: 0.6rem;
      font-weight: lighter;
      color: var(--sklearn-color-text-muted);
    }

    #sk-container-id-22 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-22 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-22 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-22 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-22 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-22 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-22 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-22 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-22 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-22 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-22 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-22 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-22 div.sk-label label.sk-toggleable__label,
    #sk-container-id-22 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-22 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-22 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-22 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-22 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-22 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-22 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-22 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-22 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 0.5em;
      text-align: center;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-22 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-22 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-22 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-22 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-22" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(sparse_threshold=0.0,
                                       transformers=[(&#x27;cat_preprocessor&#x27;,
                                                      FeatureHasher(alternate_sign=False,
                                                                    dtype=&lt;class &#x27;numpy.float32&#x27;&gt;,
                                                                    input_type=&#x27;string&#x27;,
                                                                    n_features=8),
                                                      &#x27;cat_features&#x27;)])),
                    (&#x27;classifier&#x27;,
                     GradientBoostingClassifier(max_depth=2, n_estimators=2))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-78" type="checkbox" ><label for="sk-estimator-id-78" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>Pipeline</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html">?<span>Documentation for Pipeline</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,
                     ColumnTransformer(sparse_threshold=0.0,
                                       transformers=[(&#x27;cat_preprocessor&#x27;,
                                                      FeatureHasher(alternate_sign=False,
                                                                    dtype=&lt;class &#x27;numpy.float32&#x27;&gt;,
                                                                    input_type=&#x27;string&#x27;,
                                                                    n_features=8),
                                                      &#x27;cat_features&#x27;)])),
                    (&#x27;classifier&#x27;,
                     GradientBoostingClassifier(max_depth=2, n_estimators=2))])</pre></div> </div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-79" type="checkbox" ><label for="sk-estimator-id-79" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>preprocessor: ColumnTransformer</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.compose.ColumnTransformer.html">?<span>Documentation for preprocessor: ColumnTransformer</span></a></div></label><div class="sk-toggleable__content fitted"><pre>ColumnTransformer(sparse_threshold=0.0,
                      transformers=[(&#x27;cat_preprocessor&#x27;,
                                     FeatureHasher(alternate_sign=False,
                                                   dtype=&lt;class &#x27;numpy.float32&#x27;&gt;,
                                                   input_type=&#x27;string&#x27;,
                                                   n_features=8),
                                     &#x27;cat_features&#x27;)])</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-80" type="checkbox" ><label for="sk-estimator-id-80" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>cat_preprocessor</div></div></label><div class="sk-toggleable__content fitted"><pre>cat_features</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-81" type="checkbox" ><label for="sk-estimator-id-81" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>FeatureHasher</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.feature_extraction.FeatureHasher.html">?<span>Documentation for FeatureHasher</span></a></div></label><div class="sk-toggleable__content fitted"><pre>FeatureHasher(alternate_sign=False, dtype=&lt;class &#x27;numpy.float32&#x27;&gt;,
                  input_type=&#x27;string&#x27;, n_features=8)</pre></div> </div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-82" type="checkbox" ><label for="sk-estimator-id-82" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>GradientBoostingClassifier</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html">?<span>Documentation for GradientBoostingClassifier</span></a></div></label><div class="sk-toggleable__content fitted"><pre>GradientBoostingClassifier(max_depth=2, n_estimators=2)</pre></div> </div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 72-73

Conversion to ONNX.

.. GENERATED FROM PYTHON SOURCE LINES 73-80

.. code-block:: Python


    onx = to_onnx(
        pipe,
        initial_types=[("cat_features", StringTensorType([None, None]))],
        options={"zipmap": False},
    )








.. GENERATED FROM PYTHON SOURCE LINES 81-82

There are many discrepancies?

.. GENERATED FROM PYTHON SOURCE LINES 82-96

.. code-block:: Python


    expected_proba = pipe.predict_proba(X_train)
    sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])


    got = sess.run(None, dict(cat_features=X_train.values))


    print("expected probabilities")
    print(expected_proba)

    print("onnx probabilities")
    print(got[1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    expected probabilities
    [[0.53360884 0.46639116]
     [0.53637279 0.46362721]
     [0.61595526 0.38404474]
     [0.61595526 0.38404474]
     [0.46226277 0.53773723]
     [0.61595526 0.38404474]
     [0.61595526 0.38404474]]
    onnx probabilities
    [[0.6159553  0.3840447 ]
     [0.5363728  0.46362722]
     [0.5363728  0.46362722]
     [0.6159553  0.3840447 ]
     [0.6159553  0.3840447 ]
     [0.6159553  0.3840447 ]
     [0.53360885 0.46639115]]




.. GENERATED FROM PYTHON SOURCE LINES 97-101

Let's check the feature hasher
++++++++++++++++++++++++++++++

We just remove the classifier.

.. GENERATED FROM PYTHON SOURCE LINES 101-145

.. code-block:: Python


    pipe_hash = Pipeline(
        steps=[
            (
                "preprocessor",
                ColumnTransformer(
                    [
                        (
                            "cat_preprocessor",
                            FeatureHasher(
                                n_features=8,
                                input_type="string",
                                alternate_sign=False,
                                dtype=np.float32,
                            ),
                            "cat_features",
                        )
                    ],
                    sparse_threshold=0.0,
                ),
            ),
        ],
    )
    pipe_hash.fit(X_train, y_train)

    onx = to_onnx(
        pipe_hash,
        initial_types=[("cat_features", StringTensorType([None, None]))],
        options={"zipmap": False},
    )

    expected = pipe_hash.transform(X_train)
    sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])


    got = sess.run(None, dict(cat_features=X_train.values))


    print("expected hashed features")
    print(expected)

    print("onnx hashed features")
    print(got[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    expected hashed features
    [[0. 0. 1. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1. 1. 0.]
     [0. 0. 0. 1. 0. 0. 1. 0.]
     [0. 0. 0. 0. 1. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 2.]
     [0. 2. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 2. 0.]]
    onnx hashed features
    [[1. 0. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 1. 0. 0.]
     [0. 0. 0. 0. 0. 1. 0. 0.]
     [0. 1. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 1. 0. 0. 0. 0.]
     [0. 0. 1. 0. 0. 0. 0. 0.]]




.. GENERATED FROM PYTHON SOURCE LINES 146-157

Nothing seems to be working.

First proposal
++++++++++++++

The instruction
``X_train["cat_features"] = df[cat_features].values.tolist()``
creates a DataFrame with on column of a lists of two values.
The type list is expected by scikit-learn and it can process a variable
number of elements per list. onnxruntime cannot do that.
It must be changed into the following.

.. GENERATED FROM PYTHON SOURCE LINES 157-225

.. code-block:: Python


    pipe_hash = Pipeline(
        steps=[
            (
                "preprocessor",
                ColumnTransformer(
                    [
                        (
                            "cat_preprocessor1",
                            FeatureHasher(
                                n_features=8,
                                input_type="string",
                                alternate_sign=False,
                                dtype=np.float32,
                            ),
                            [0],
                        ),
                        (
                            "cat_preprocessor2",
                            FeatureHasher(
                                n_features=8,
                                input_type="string",
                                alternate_sign=False,
                                dtype=np.float32,
                            ),
                            [1],
                        ),
                    ],
                    sparse_threshold=0.0,
                ),
            ),
        ],
    )

    X_train_skl = df[cat_features].copy()
    for c in cat_features:
        X_train_skl[c] = X_train_skl[c].values.tolist()

    pipe_hash.fit(X_train_skl.values, y_train)

    onx = to_onnx(
        pipe_hash,
        initial_types=[
            ("cat1", StringTensorType([None, 1])),
            ("cat2", StringTensorType([None, 1])),
        ],
        options={"zipmap": False},
    )


    expected = pipe_hash.transform(X_train_skl.values)
    sess = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])


    got = sess.run(
        None,
        dict(
            cat1=df["Cat1"].values.reshape((-1, 1)), cat2=df["Cat2"].values.reshape((-1, 1))
        ),
    )


    print("expected fixed hashed features")
    print(expected)

    print("onnx fixed hashed features")
    print(got[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    expected fixed hashed features
    [[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1.]
     [0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0.]]
    onnx fixed hashed features
    [[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1.]
     [0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 1. 0.]]




.. GENERATED FROM PYTHON SOURCE LINES 226-236

This is not the original pipeline. It has 16 columns instead of 8
but it does produce the same results.
One option would be to add the first 8 columns to the other 8
by using a custom converter.

Second proposal
+++++++++++++++

We use the same initial pipeline but we tweak the input
onnxruntime receives.

.. GENERATED FROM PYTHON SOURCE LINES 236-286

.. code-block:: Python


    pipe_hash = Pipeline(
        steps=[
            (
                "preprocessor",
                ColumnTransformer(
                    [
                        (
                            "cat_preprocessor",
                            FeatureHasher(
                                n_features=8,
                                input_type="string",
                                alternate_sign=False,
                                dtype=np.float32,
                            ),
                            "cat_features",
                        )
                    ],
                    sparse_threshold=0.0,
                ),
            ),
        ],
    )
    pipe_hash.fit(X_train, y_train)

    onx = to_onnx(
        pipe_hash,
        initial_types=[("cat_features", StringTensorType([None, 1]))],
        options={"zipmap": False, "preprocessor__cat_preprocessor__separator": "#"},
    )

    expected = pipe_hash.transform(X_train)


    so = SessionOptions()
    so.register_custom_ops_library(get_library_path())
    sess = InferenceSession(onx.SerializeToString(), so, providers=["CPUExecutionProvider"])

    # We merged both columns cat1 and cat2 into a single cat_features.
    df_fixed = DataFrame()
    df_fixed["cat_features"] = np.array([f"{a}#{b}" for a, b in X_train["cat_features"]])

    got = sess.run(None, {"cat_features": df_fixed[["cat_features"]].values})

    print("expected original hashed features")
    print(expected)

    print("onnx fixed original hashed features")
    print(got[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    expected original hashed features
    [[0. 0. 1. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1. 1. 0.]
     [0. 0. 0. 1. 0. 0. 1. 0.]
     [0. 0. 0. 0. 1. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 2.]
     [0. 2. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 2. 0.]]
    onnx fixed original hashed features
    [[0. 0. 1. 0. 0. 0. 1. 0.]
     [0. 0. 0. 0. 0. 1. 1. 0.]
     [0. 0. 0. 1. 0. 0. 1. 0.]
     [0. 0. 0. 0. 1. 0. 1. 0.]
     [0. 0. 0. 0. 0. 0. 0. 2.]
     [0. 2. 0. 0. 0. 0. 0. 0.]
     [0. 0. 0. 0. 0. 0. 2. 0.]]




.. GENERATED FROM PYTHON SOURCE LINES 287-293

It works now.

Sparsity?
+++++++++

Let's try with the classifier now and no `sparse_threshold=0.0`.

.. GENERATED FROM PYTHON SOURCE LINES 293-339

.. code-block:: Python


    pipe = Pipeline(
        steps=[
            (
                "preprocessor",
                ColumnTransformer(
                    [
                        (
                            "cat_preprocessor",
                            FeatureHasher(
                                n_features=8,
                                input_type="string",
                                alternate_sign=False,
                                dtype=np.float32,
                            ),
                            "cat_features",
                        )
                    ],
                    # sparse_threshold=0.0,
                ),
            ),
            ("classifier", GradientBoostingClassifier(n_estimators=2, max_depth=2)),
        ],
    )
    pipe.fit(X_train, y_train)
    expected = pipe.predict_proba(X_train)


    onx = to_onnx(
        pipe,
        initial_types=[("cat_features", StringTensorType([None, 1]))],
        options={"zipmap": False, "preprocessor__cat_preprocessor__separator": "#"},
    )

    so = SessionOptions()
    so.register_custom_ops_library(get_library_path())
    sess = InferenceSession(onx.SerializeToString(), so, providers=["CPUExecutionProvider"])
    got = sess.run(None, {"cat_features": df_fixed[["cat_features"]].values})


    print("expected probabilies")
    print(expected)

    print("onnx probabilies")
    print(got[1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    expected probabilies
    [[0.53360884 0.46639116]
     [0.46226277 0.53773723]
     [0.61595526 0.38404474]
     [0.61595526 0.38404474]
     [0.53637279 0.46362721]
     [0.61595526 0.38404474]
     [0.61595526 0.38404474]]
    onnx probabilies
    [[0.53360885 0.46639115]
     [0.4622628  0.5377372 ]
     [0.6159553  0.3840447 ]
     [0.6159553  0.3840447 ]
     [0.5363728  0.46362722]
     [0.6159553  0.3840447 ]
     [0.6159553  0.3840447 ]]




.. GENERATED FROM PYTHON SOURCE LINES 340-347

scikit-learn keeps the sparse outputs from
the FeatureHasher. onnxruntime does not support
sparse features. This may have an impact on the conversion
if the model next to this step makes a difference between a
missing sparse value and zero.
That does not seem to be the case for this model but
other models or libraries may behave differently.

.. GENERATED FROM PYTHON SOURCE LINES 347-349

.. code-block:: Python


    print(pipe.steps[0][-1].transform(X_train))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <Compressed Sparse Row sparse matrix of dtype 'float32'
            with 11 stored elements and shape (7, 8)>
      Coords        Values
      (0, 2)        1.0
      (0, 6)        1.0
      (1, 5)        1.0
      (1, 6)        1.0
      (2, 3)        1.0
      (2, 6)        1.0
      (3, 4)        1.0
      (3, 6)        1.0
      (4, 7)        2.0
      (5, 1)        2.0
      (6, 6)        2.0





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.693 seconds)


.. _sphx_glr_download_auto_tutorial_plot_weird_pandas_and_hash.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_weird_pandas_and_hash.ipynb <plot_weird_pandas_and_hash.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_weird_pandas_and_hash.py <plot_weird_pandas_and_hash.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_weird_pandas_and_hash.zip <plot_weird_pandas_and_hash.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
