
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial/plot_jfunction_transformer.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorial_plot_jfunction_transformer.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_jfunction_transformer.py:


Issues with FunctionTransformer
===============================

A pipeline including a `FunctionTransformer
<https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.FunctionTransformer.html>`_
cannot be automatically converted into onnx because there is no converter able to
convert custom python code into ONNX. A custom converter needs to be written
specifically for it.

Initial try
+++++++++++

A very simple pipeline and the first attempt to convert it into ONNX.

.. GENERATED FROM PYTHON SOURCE LINES 16-73

.. code-block:: Python


    import numpy as np
    from numpy.testing import assert_allclose
    from onnx.version_converter import convert_version
    from pandas import DataFrame
    from sklearn.base import TransformerMixin, BaseEstimator
    from sklearn.tree import DecisionTreeClassifier
    from sklearn.preprocessing import FunctionTransformer
    from sklearn.compose import ColumnTransformer
    from sklearn.pipeline import Pipeline
    from skl2onnx import to_onnx

    # For the custom converter
    from skl2onnx import update_registered_converter
    from skl2onnx.common.utils import check_input_and_output_numbers
    from skl2onnx.algebra.onnx_ops import OnnxSlice, OnnxSub, OnnxDiv, OnnxMul, OnnxCastLike
    from skl2onnx.helpers import add_onnx_graph
    import onnxscript
    from onnxscript import opset18 as op

    # To check discrepancies
    from onnx.reference import ReferenceEvaluator
    from onnxruntime import InferenceSession


    def calculate_growth(df):
        df["c"] = 100 * (df["a"] - df["b"]) / df["b"]
        return df


    mapper = ColumnTransformer(
        transformers=[
            ("c", FunctionTransformer(calculate_growth), ["a", "b"]),
        ],
        remainder="passthrough",
        verbose_feature_names_out=False,
    )
    mapper.set_output(transform="pandas")

    pipe = Pipeline([("mapper", mapper), ("classifier", DecisionTreeClassifier())])

    data = DataFrame(
        [
            dict(a=2, b=1, f=5),
            dict(a=50, b=4, f=10),
            dict(a=5, b=2, f=4),
            dict(a=100, b=6, f=20),
        ]
    )
    y = np.array([0, 1, 0, 1], dtype=np.int64)
    pipe.fit(data, y)

    try:
        to_onnx(pipe, data[:1], options={"zipmap": False})
    except Exception as e:
        print("It does not work:", e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It does not work: FunctionTransformer is not supported unless the transform function is None (= identity). You may raise an issue at https://github.com/onnx/sklearn-onnx/issues.




.. GENERATED FROM PYTHON SOURCE LINES 74-79

Use of custom transformer
+++++++++++++++++++++++++

It is easier to write a custom converter if the FunctionTransformer
is implemented as a custom transformer.

.. GENERATED FROM PYTHON SOURCE LINES 79-108

.. code-block:: Python



    class GrowthCalculator(BaseEstimator, TransformerMixin):
        def __init__(self):
            pass

        def calculate_growth(self, x, y):
            return 100 * (x - y) / y

        def fit(self, X, y=None):
            return self

        def transform(self, X, y=None):
            x = X.apply(lambda x: self.calculate_growth(x.a, x.b), axis=1)
            return x.values.reshape((-1, 1))


    mapper = ColumnTransformer(
        transformers=[
            ("ab", FunctionTransformer(), ["a", "b"]),  # We keep the first column.
            ("c", GrowthCalculator(), ["a", "b"]),  # We add a new one.
        ],
        remainder="passthrough",
        verbose_feature_names_out=False,
    )

    pipe_tr = Pipeline([("mapper", mapper), ("classifier", DecisionTreeClassifier())])
    pipe_tr.fit(data, y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-21 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: #000;
      --sklearn-color-text-muted: #666;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-21 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-21 pre {
      padding: 0;
    }

    #sk-container-id-21 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-21 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-21 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-21 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-21 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-21 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-21 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-21 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-21 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-21 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-21 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-21 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-21 label.sk-toggleable__label {
      cursor: pointer;
      display: flex;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
      align-items: start;
      justify-content: space-between;
      gap: 0.5em;
    }

    #sk-container-id-21 label.sk-toggleable__label .caption {
      font-size: 0.6rem;
      font-weight: lighter;
      color: var(--sklearn-color-text-muted);
    }

    #sk-container-id-21 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-21 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-21 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-21 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-21 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-21 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-21 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-21 div.sk-label label.sk-toggleable__label,
    #sk-container-id-21 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-21 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-21 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-21 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-21 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-21 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-21 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-21 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 0.5em;
      text-align: center;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-21 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-21 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-21 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-21 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-21" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;mapper&#x27;,
                     ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                                       transformers=[(&#x27;ab&#x27;, FunctionTransformer(),
                                                      [&#x27;a&#x27;, &#x27;b&#x27;]),
                                                     (&#x27;c&#x27;, GrowthCalculator(),
                                                      [&#x27;a&#x27;, &#x27;b&#x27;])],
                                       verbose_feature_names_out=False)),
                    (&#x27;classifier&#x27;, DecisionTreeClassifier())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-69" type="checkbox" ><label for="sk-estimator-id-69" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>Pipeline</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html">?<span>Documentation for Pipeline</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>Pipeline(steps=[(&#x27;mapper&#x27;,
                     ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                                       transformers=[(&#x27;ab&#x27;, FunctionTransformer(),
                                                      [&#x27;a&#x27;, &#x27;b&#x27;]),
                                                     (&#x27;c&#x27;, GrowthCalculator(),
                                                      [&#x27;a&#x27;, &#x27;b&#x27;])],
                                       verbose_feature_names_out=False)),
                    (&#x27;classifier&#x27;, DecisionTreeClassifier())])</pre></div> </div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-70" type="checkbox" ><label for="sk-estimator-id-70" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>mapper: ColumnTransformer</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.compose.ColumnTransformer.html">?<span>Documentation for mapper: ColumnTransformer</span></a></div></label><div class="sk-toggleable__content fitted"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                      transformers=[(&#x27;ab&#x27;, FunctionTransformer(), [&#x27;a&#x27;, &#x27;b&#x27;]),
                                    (&#x27;c&#x27;, GrowthCalculator(), [&#x27;a&#x27;, &#x27;b&#x27;])],
                      verbose_feature_names_out=False)</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-71" type="checkbox" ><label for="sk-estimator-id-71" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>ab</div></div></label><div class="sk-toggleable__content fitted"><pre>[&#x27;a&#x27;, &#x27;b&#x27;]</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-72" type="checkbox" ><label for="sk-estimator-id-72" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>NoneType(...)</div><div class="caption">FunctionTransformer</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.FunctionTransformer.html">?<span>Documentation for FunctionTransformer</span></a></div></label><div class="sk-toggleable__content fitted"><pre>FunctionTransformer()</pre></div> </div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-73" type="checkbox" ><label for="sk-estimator-id-73" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>c</div></div></label><div class="sk-toggleable__content fitted"><pre>[&#x27;a&#x27;, &#x27;b&#x27;]</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-74" type="checkbox" ><label for="sk-estimator-id-74" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>GrowthCalculator</div></div></label><div class="sk-toggleable__content fitted"><pre>GrowthCalculator()</pre></div> </div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-75" type="checkbox" ><label for="sk-estimator-id-75" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>remainder</div></div></label><div class="sk-toggleable__content fitted"><pre>[&#x27;f&#x27;]</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-76" type="checkbox" ><label for="sk-estimator-id-76" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>passthrough</div></div></label><div class="sk-toggleable__content fitted"><pre>passthrough</pre></div> </div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-77" type="checkbox" ><label for="sk-estimator-id-77" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>DecisionTreeClassifier</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class="sk-toggleable__content fitted"><pre>DecisionTreeClassifier()</pre></div> </div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 109-110

Both pipelines return the same output.

.. GENERATED FROM PYTHON SOURCE LINES 110-112

.. code-block:: Python

    assert_allclose(pipe.predict_proba(data), pipe_tr.predict_proba(data))








.. GENERATED FROM PYTHON SOURCE LINES 113-114

Let's check it produces the same number of features.

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: Python

    assert_allclose(pipe.steps[0][-1].transform(data), pipe_tr.steps[0][-1].transform(data))








.. GENERATED FROM PYTHON SOURCE LINES 117-118

But the conversion still fails with a different error message.

.. GENERATED FROM PYTHON SOURCE LINES 118-125

.. code-block:: Python


    try:
        to_onnx(pipe_tr, data[:1], options={"zipmap": False})
    except Exception as e:
        print("It does not work:", e)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    It does not work: Unable to find a shape calculator for type '<class '__main__.GrowthCalculator'>'.
    It usually means the pipeline being converted contains a
    transformer or a predictor with no corresponding converter
    implemented in sklearn-onnx. If the converted is implemented
    in another library, you need to register
    the converted so that it can be used by sklearn-onnx (function
    update_registered_converter). If the model is not yet covered
    by sklearn-onnx, you may raise an issue to
    https://github.com/onnx/sklearn-onnx/issues
    to get the converter implemented or even contribute to the
    project. If the model is a custom model, a new converter must
    be implemented. Examples can be found in the gallery.





.. GENERATED FROM PYTHON SOURCE LINES 126-131

Custom converter
++++++++++++++++

We need to implement the method `calculate_growth` in ONNX.
The first function returns the expected type and shape.

.. GENERATED FROM PYTHON SOURCE LINES 131-177

.. code-block:: Python



    def growth_shape_calculator(operator):
        check_input_and_output_numbers(operator, input_count_range=1, output_count_range=1)
        # Gets the input type, the transformer works on any numerical type.
        input_type = operator.inputs[0].type.__class__
        # The first dimension is usually dynamic (batch dimension).
        input_dim = operator.inputs[0].get_first_dimension()
        operator.outputs[0].type = input_type([input_dim, 1])


    def growth_converter(scope, operator, container):
        # No need to retrieve the fitted estimator, it is not trained.
        # op = operator.raw_operator
        opv = container.target_opset
        X = operator.inputs[0]

        # 100 * (x-y)/y  --> 100 * (X[0] - X[1]) / X[1]

        zero = np.array([0], dtype=np.int64)
        one = np.array([1], dtype=np.int64)
        two = np.array([2], dtype=np.int64)
        hundred = np.array([100], dtype=np.float32)

        # Slice(data, starts, ends, axes)
        x0 = OnnxSlice(X, zero, one, one, op_version=opv)
        x1 = OnnxSlice(X, one, two, one, op_version=opv)
        z = OnnxMul(
            OnnxCastLike(hundred, X, op_version=opv),
            OnnxDiv(OnnxSub(x0, x1, op_version=opv), x1, op_version=opv),
            op_version=opv,
            output_names=operator.outputs[0],
        )
        z.add_to(scope, container)


    update_registered_converter(
        GrowthCalculator,
        "AliasGrowthCalculator",
        growth_shape_calculator,
        growth_converter,
    )


    onx = to_onnx(pipe_tr, data[:1], target_opset=18, options={"zipmap": False})








.. GENERATED FROM PYTHON SOURCE LINES 178-182

Let's check there is no discrepancies
+++++++++++++++++++++++++++++++++++++

First the expected values

.. GENERATED FROM PYTHON SOURCE LINES 182-186

.. code-block:: Python


    expected = (pipe_tr.predict(data), pipe_tr.predict_proba(data))
    print(expected)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (array([0, 1, 0, 1]), array([[1., 0.],
           [0., 1.],
           [1., 0.],
           [0., 1.]]))




.. GENERATED FROM PYTHON SOURCE LINES 187-188

Then let's check with :class:`onnx.reference.ReferenceEvaluator`.

.. GENERATED FROM PYTHON SOURCE LINES 188-202

.. code-block:: Python


    feeds = {
        "a": data["a"].values.reshape((-1, 1)),
        "b": data["b"].values.reshape((-1, 1)),
        "f": data["f"].values.reshape((-1, 1)),
    }

    # verbose=10 to show intermediate results
    ref = ReferenceEvaluator(onx, verbose=0)
    got = ref.run(None, feeds)

    assert_allclose(expected[0], got[0])
    assert_allclose(expected[1], got[1])








.. GENERATED FROM PYTHON SOURCE LINES 203-204

Then with the runtime used to deploy, onnxruntime for example.

.. GENERATED FROM PYTHON SOURCE LINES 204-211

.. code-block:: Python


    ref = InferenceSession(onx.SerializeToString(), providers=["CPUExecutionProvider"])
    got = ref.run(None, feeds)

    assert_allclose(expected[0], got[0])
    assert_allclose(expected[1], got[1])








.. GENERATED FROM PYTHON SOURCE LINES 212-218

Custom converter with onnxscript
++++++++++++++++++++++++++++++++

`onnxscript <https://github.com/microsoft/onnxscript>`_
offers a less verbose API than what onnx package implements.
Let's see how to use it to write the converters.

.. GENERATED FROM PYTHON SOURCE LINES 218-229

.. code-block:: Python



    @onnxscript.script()
    def calculate_onnxscript_verbose(X):
        # onnxscript must define an opset. We use an identity node
        # from a specific opset to set it (otherwise it fails).
        x0 = op.Slice(X, [0], [1], [1])
        x1 = op.Slice(X, [1], [2], [1])
        return op.Mul(op.Div(op.Sub(x0, x1), x1), 100)









.. GENERATED FROM PYTHON SOURCE LINES 230-234

This version uses the strict definition of ONNX operators.
The code can be more simple if regular python operators are used.
They may not be converted into ONNX but an error message
is raised in that case.

.. GENERATED FROM PYTHON SOURCE LINES 234-246

.. code-block:: Python



    @onnxscript.script()
    def calculate_onnxscript(X):
        # onnxscript must define an opset. We use an identity node
        # from a specific opset to set it (otherwise it fails).
        xi = op.Identity(X)
        x0 = xi[:, :1]
        x1 = xi[:, 1:]
        return (x0 - x1) / x1 * 100









.. GENERATED FROM PYTHON SOURCE LINES 247-248

We can also check that it is equivalent to the python implementation.

.. GENERATED FROM PYTHON SOURCE LINES 248-252

.. code-block:: Python

    f_expected = calculate_growth(data)["c"].values
    f_got = calculate_onnxscript(data[["a", "b"]].values.astype(np.float32))
    assert_allclose(f_expected.ravel(), f_got.ravel(), atol=1e-6)








.. GENERATED FROM PYTHON SOURCE LINES 253-254

Let's use it in the converter.

.. GENERATED FROM PYTHON SOURCE LINES 254-276

.. code-block:: Python



    def growth_converter_onnxscript(scope, operator, container):
        # No need to retrieve the fitted estimator, it is not trained.
        # op = operator.raw_operator
        opv = container.target_opset

        # 100 * (x-y)/y  --> 100 * (X[0] - X[1]) / X[1]
        proto = calculate_onnxscript.to_model_proto()
        # The function is written with opset 18, it needs to be converted
        # to the opset required by the user when the conversion starts.
        proto_version = convert_version(proto, opv)
        add_onnx_graph(scope, operator, container, proto_version)


    update_registered_converter(
        GrowthCalculator,
        "AliasGrowthCalculator",
        growth_shape_calculator,
        growth_converter_onnxscript,
    )








.. GENERATED FROM PYTHON SOURCE LINES 277-278

Let's check it works.

.. GENERATED FROM PYTHON SOURCE LINES 278-282

.. code-block:: Python


    onx = to_onnx(pipe_tr, data[:1], target_opset=18, options={"zipmap": False})









.. GENERATED FROM PYTHON SOURCE LINES 283-284

And again the discrepancies.

.. GENERATED FROM PYTHON SOURCE LINES 284-291

.. code-block:: Python


    ref = ReferenceEvaluator(onx, verbose=0)
    got = ref.run(None, feeds)
    assert_allclose(expected[0], got[0])
    assert_allclose(expected[1], got[1])









.. GENERATED FROM PYTHON SOURCE LINES 292-293

Finally.

.. GENERATED FROM PYTHON SOURCE LINES 293-294

.. code-block:: Python

    print("done.")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    done.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.349 seconds)


.. _sphx_glr_download_auto_tutorial_plot_jfunction_transformer.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_jfunction_transformer.ipynb <plot_jfunction_transformer.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_jfunction_transformer.py <plot_jfunction_transformer.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_jfunction_transformer.zip <plot_jfunction_transformer.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
