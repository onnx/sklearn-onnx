# -------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
# --------------------------------------------------------------------------
from .graph_state import GraphState


class OnnxOperator:
    """
    Ancestor to every *ONNX* operator exposed in
    :mod:`onnx_ops` and :mod:`onnx_ops_ml`. These files
    are automatically generated by unit test
    *test_onnx_operators_parse_spec*
    Every instance is supposed to be included in
    a graph as a node. 
    
    :param inputs: list of inputs expected by the operator
    :param outputs: empty if this node is not a final node,
        its outputs are not the graph outputs
    :param kwargs: additional parameters of the operator
    """

    def __init__(self, *inputs, outputs=None, **kwargs):
        self.state = None
        self.inputs = list(inputs)
        self.kwargs = kwargs
        if outputs is None:
            # It means intermediate outputs. We suppose there is one.
            outputs = [None]
        self.known_outputs = outputs

    def _register_outputs(self, scope):
        """
        Registers outputs in *scope* if not alreay registered.
        It should not be directly called but from method *add_to*.
        
        :param scope: scope
        """
        for i in range(len(self.known_outputs)):
            o = self.known_outputs[i]
            if o is None:
                self.known_outputs[i] = scope.get_unique_variable_name(
                    self.__class__.__name__ + '-o')

    def add_to(self, scope, container):
        """
        Adds outputs to the container if not already added,
        registered the outputs if the node is not final.
        
        :param scope: scope
        :param container: container
        """
        if self.state is None:
            if self.kwargs.get('op_version', '') is None:
                kwargs = self.kwargs.copy()
                del kwargs['op_version']
            else:
                kwargs = self.kwargs

            self._register_outputs(scope)
            self.state = GraphState(self.inputs, self.known_outputs,
                                    self.__class__.__name__,
                                    scope, container, None,
                                    **self.kwargs)
            self.state.run()

    @property
    def outputs(self):
        """
        Returns the outputs of the node.
        """
        if self.state is None:
            raise RuntimeError("Method add was not called.")
        return self.state.outputs
